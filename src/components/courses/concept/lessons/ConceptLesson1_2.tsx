import type { LessonContent } from '../../../../types/LessonTypes';

const ConceptLesson1_2Content: LessonContent = {
  title: 'ប្រវត្តិនៃការសរសេរកម្មវិធី',
  objectives: [
    'ស្វែងយល់ពីការចាប់ផ្តើមនៃការសរសេរកម្មវិធី',
    'យល់ដឹងពីការវិវឌ្ឍន៍នៃភាសាសរសេរកម្មវិធី',
    'ស្គាល់ភាសាសរសេរកម្មវិធីសំខាន់ៗនៅសម័យផ្សេងៗ',
    'រៀនអំពីឥទ្ធិពលនៃការសរសេរកម្មវិធីលើបច្ចេកវិទ្យា',
    'ប្រៀបធៀបភាសាសរសេរកម្មវិធីសម័យដើម និងសម័យទំនើប'
  ],
  content: `
# ប្រវត្តិនៃការសរសេរកម្មវិធី 📜💻

---

**ការសរសេរកម្មវិធី** មានប្រវត្តិដ៏វែងឆ្ងាយ ដែលចាប់ផ្តើមពីគំនិតសាមញ្ញនៃការបង្កើតការណែនាំសម្រាប់ម៉ាស៊ីន រហូតដល់ការអភិវឌ្ឍភាសាទំនើបដែលប្រើសម្រាប់បង្កើតបច្ចេកវិទ្យាស្មុគស្មាញ។ ការវិវឌ្ឍនៃការសរសេរកម្មវិធីបានផ្លាស់ប្តូរពិភពលោក។

---

## 1. ការចាប់ផ្តើមនៃការសរសេរកម្មវិធី

ការសរសេរកម្មវិធីបានចាប់ផ្តើមនៅសតវត្សទី១៩៖
- **១៨៤៣:** Ada Lovelace បានសរសេរកម្មវិធីដំបូងសម្រាប់ Analytical Engine របស់ Charles Babbage ដែលត្រូវបានគេចាត់ទុកថាជា "អ្នកសរសេរកម្មវិធីដំបូង"។
- **១៩៣៦:** Alan Turing បានណែនាំគំនិតនៃ Turing Machine ដែលជាមូលដ្ឋានគ្រឹះនៃកុំព្យូទ័រទំនើប។
- **១៩៤០ ទសវត្សរ៍:** កុំព្យូទ័រដំបូងៗដូចជា ENIAC បានប្រើការណែនាំជាភាសាម៉ាស៊ីន (Machine Code)។

---

## 2. ការវិវឌ្ឍនៃភាសាសរសេរកម្មវិធី

ភាសាសរសេរកម្មវិធីបានវិវឌ្ឍពី Low-Level ទៅ High-Level៖
- **១៩៥៦:** **Fortran** (Formula Translation) ត្រូវបានបង្កើតឡើងសម្រាប់ការគណនាវិទ្យាសាស្ត្រ។
- **១៩៥៩:** **COBOL** ត្រូវបានរចនាឡើងសម្រាប់កម្មវិធីអាជីវកម្ម។
- **១៩៧២:** **C** ត្រូវបានអភិវឌ្ឍដោយ Dennis Ritchie នៅ Bell Labs ដែលជាមូលដ្ឋានសម្រាប់ភាសាទំនើប។
- **១៩៨៣:** **C++** បានបន្ថែម Object-Oriented Programming (OOP) ទៅក្នុង C។
- **១៩៩៥:** **Java** ត្រូវបានណែនាំដោយ Sun Microsystems សម្រាប់ Cross-Platform Development។
- **២០០៨:** **Python** ក្លាយជាភាសាដ៏ពេញនិយមសម្រាប់ភាពសាមញ្ញ និង versatility។
- **២៦៨១ (២០២៥):** ភាសាទំនើបដូចជា Rust, Go, និង TypeScript កំពុងត្រូវបានប្រើសម្រាប់ Web, AI, និង System Programming។

---

## 3. ភាសាសរសេរកម្មវិធីសំខាន់ៗ

- **Low-Level Languages:** Machine Code, Assembly (ផ្តល់ការគ្រប់គ្រង Hardware ប៉ុន្តែស្មុគស្មាញ)។
- **High-Level Languages:** Fortran, COBOL, C, C++, Java, Python (ងាយស្រួលសម្រាប់មនុស្ស)។
- **Scripting Languages:** Python, JavaScript, Ruby (សម្រាប់ស្វ័យប្រវត្តិកម្ម និង Web Development)។
- **Modern Languages:** Rust (សម្រាប់ Performance និង Safety), Go (សម្រាប់ Cloud Computing), TypeScript (សម្រាប់ Web Development)។

---

## 4. ឥទ្ធិពលនៃការសរសេរកម្មវិធី

ការសរសេរកម្មវិធីបានជះឥទ្ធិពលយ៉ាងខ្លាំង៖
- **បច្ចេកវិទ្យា:** បង្កើតកុំព្យូទ័រ ទូរស័ព្ទ និងអ៊ីនធឺណិត។
- **ឧស្សាហកម្ម:** ជួយអភិវឌ្ឍ AI, Blockchain, និង IoT។
- **សេដ្ឋកិច្ច:** បង្កើតឱកាសការងារសម្រាប់អ្នកអភិវឌ្ឍន៍។
- **ជីវភាពប្រចាំថ្ងៃ:** កម្មវិធីដូចជា Google, Facebook, និង Mobile Apps។

---

## 5. ការប្រៀបធៀបភាសាសម័យដើម និងសម័យទំនើប

| ភាសា         | សម័យ       | គោលបំណង                     | គុណសម្បត្តិ                  | គុណវិបត្តិ                   |
| :------------ | :---------- | :---------------------------- | :---------------------------- | :--------------------------- |
| **Fortran**   | សម័យដើម   | ការគណនាវិទ្យាសាស្ត្រ        | លឿនសម្រាប់គណនា            | Syntax ស្មុគស្មាញ            |
| **C**         | សម័យដើម   | System Programming            | Performance ខ្ពស់            | គ្មាន Memory Safety          |
| **Python**    | សម័យទំនើប | ការអភិវឌ្ឍទូទៅ, AI          | ងាយស្រួលរៀន, Versatile    | យឺតជាងភាសា Compiled       |
| **Rust**      | សម័យទំនើប | System Programming, Safety    | Memory Safety, Performance    | Learning Curve ខ្ពស់         |

**ឧទាហរណ៍កូដ C សាមញ្ញ (សម័យដើម):**

\`\`\`c
#include <stdio.h>
int main() {
    printf("សួស្តី! នេះជាកម្មវិធី C!\n");
    return 0;
}
\`\`\`

**ឧទាហរណ៍កូដ Python សាមញ្ញ (សម័យទំនើប):**

\`\`\`python
print("សួស្តី! នេះជាកម្មវិធី Python!")
\`\`\`

---

## 6. ហេតុអ្វីសំខាន់ក្នុងការសិក្សាប្រវត្តិនៃការសរសេរកម្មវិធី?

- **យល់ពីមូលដ្ឋាន:** ជួយអ្នកយល់ពីឫសគល់នៃបច្ចេកវិទ្យា។
- **ការវិវឌ្ឍ:** បង្ហាញពីរបៀបដែលភាសាទំនើបបានកើតឡើង។
- **ជម្រើសភាសា:** ជួយអ្នកជ្រើសរើសភាសាសមស្របសម្រាប់គម្រោង។
- **ការបំផុសគំនិត:** ប្រវត្តិបង្ហាញពីការច្នៃប្រឌិតរបស់អ្នកអភិវឌ្ឍន៍។
`,
  examples: [
    `<h3>ឧទាហរណ៍៖ កម្មវិធី C សាមញ្ញ</h3>
<p>បង្កើតកម្មវិធី C ដែលបង្ហាញសារនៅលើអេក្រង់។</p>
<pre><code class="language-c">
#include <stdio.h>
int main() {
    printf("សួស្តី! នេះជាកម្មវិធី C!\n");
    return 0;
}
</code></pre>
<hr>
<h3>ឧទាហរណ៍៖ កម្មវិធី Python សាមញ្ញ</h3>
<p>បង្កើតកម្មវិធី Python ដែលស្នើសុំឈ្មោះអ្នកប្រើ និងបង្ហាញសារស្វាគមន៍។</p>
<pre><code class="language-python">
name = input("បញ្ចូលឈ្មោះរបស់អ្នក: ")
print(f"សួស្តី {name}! សូមស្វាគមន៍មកកាន់ Python!")
</code></pre>
`
  ],
  quiz: [
    {
      question: 'តើនរណាត្រូវបានគេចាត់ទុកថាជាអ្នកសរសេរកម្មវិធីដំបូង?',
      options: ['Alan Turing', 'Ada Lovelace', 'Dennis Ritchie', 'Guido van Rossum'],
      correct: 1,
      explanation: 'Ada Lovelace បានសរសេរកម្មវិធីដំបូងសម្រាប់ Analytical Engine។'
    },
    {
      question: 'តើភាសា Fortran ត្រូវបានបង្កើតឡើងនៅឆ្នាំណា?',
      options: ['១៩៤៣', '១៩៥៦', '១៩៧២', '១៩៩៥'],
      correct: 1,
      explanation: 'Fortran ត្រូវបានបង្កើតឡើងនៅឆ្នាំ ១៩៥៦។'
    },
    {
      question: 'តើភាសាណាដែលជាមូលដ្ឋានសម្រាប់ភាសាទំនើបជាច្រើន?',
      options: ['C', 'Fortran', 'COBOL', 'Python'],
      correct: 0,
      explanation: 'C ជាមូលដ្ឋានសម្រាប់ភាសាទំនើបដូចជា C++, Java, និងផ្សេងទៀត។'
    },
    {
      question: 'តើភាសា Java ត្រូវបានណែនាំនៅឆ្នាំណា?',
      options: ['១៩៨៣', '១៩៩៥', '២៦៨១', '១៩៧២'],
      correct: 1,
      explanation: 'Java ត្រូវបានណែនាំនៅឆ្នាំ ១៩៩៥។'
    },
    {
      question: 'តើភាសា Rust ត្រូវបានប្រើជាចម្បងសម្រាប់អ្វី?',
      options: ['Web Development', 'System Programming', 'Scripting', 'Data Analysis'],
      correct: 1,
      explanation: 'Rust ត្រូវបានប្រើសម្រាប់ System Programming និង Memory Safety។'
    }
  ],
  lab: {
    task: `
បង្កើតកម្មវិធី Python សាមញ្ញដែលបង្ហាញពីភាសាទំនើប។

**តម្រូវការ:**
1. **កម្មវិធីសាមញ្ញ:**
   - ស្នើសុំឈ្មោះអ្នកប្រើ និងឆ្នាំកំណើត។
   - គណនាអាយុផ្អែកលើឆ្នាំបច្ចុប្បន្ន (២៦៨១)។
   - បង្ហាញសារស្វាគមន៍ជាមួយឈ្មោះ និងអាយុ។
2. **Basic Error Handling:**
   - ប្រើ try-except ដើម្បីគ្រប់គ្រងករណីដែលអ្នកប្រើបញ្ចូលឆ្នាំមិនមែនជាលេខ។

**ការណែនាំ:** ប្រើ Python និង Text Editor ដូចជា VS Code ឬ Online IDE។
    `,
    solution: `
\`\`\`python
try:
    name = input("បញ្ចូលឈ្មោះរបស់អ្នក: ")
    birth_year = int(input("បញ្ចូលឆ្នាំកំណើតរបស់អ្នក: "))
    current_year = 2681
    age = current_year - birth_year
    print(f"សួស្តី {name}! អ្នកមានអាយុ {age} ឆ្នាំ។")
except ValueError:
    print("សូមបញ្ចូលឆ្នាំកំណើតជាលេខ!")
\`\`\`
`
  }
};

export default ConceptLesson1_2Content;