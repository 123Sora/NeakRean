import type { LessonContent } from '../../../../types/LessonTypes';

const ConceptLesson1_1Content: LessonContent = {
  title: 'អ្វីទៅជាការសរសេរកម្មវិធី?',
  objectives: [
    'យល់ដឹងអំពីនិយមន័យនៃការសរសេរកម្មវិធី',
    'ស្វែងយល់ពីប្រវត្តិសង្ខេបនៃការសរសេរកម្មវិធី',
    'ស្គាល់ប្រភេទផ្សេងៗនៃភាសាសរសេរកម្មវិធី',
    'យល់ពីរបៀបដែលកម្មវិធីដំណើរការនៅលើកុំព្យូទ័រ',
    'ប្រៀបធៀបភាសាសរសេរកម្មវិធីជាមួយឧទាហរណ៍ជាក់ស្តែង'
  ],
  content: `
# អ្វីទៅជាការសរសេរកម្មវិធី? 💻

---

**ការសរសេរកម្មវិធី** គឺជាដំណើរការនៃការបង្កើតសំណុំនៃការណែនាំ (Instructions) ដែលកុំព្យូទ័រអាចយល់ និងអនុវត្តបាន។ ការណែនាំទាំងនេះត្រូវបានសរសេរជាទម្រង់កូដ (Code) ដោយប្រើភាសាសរសេរកម្មវិធីដូចជា Python, Java, C++, ឬ JavaScript។ ការសរសេរកម្មវិធីអនុញ្ញាតឱ្យយើងបង្កើតកម្មវិធី គេហទំព័រ និងប្រព័ន្ធផ្សេងៗ។

---

## 1. និយមន័យនៃការសរសេរកម្មវិធី

ការសរសេរកម្មវិធីគឺជាសកម្មភាពនៃការសរសេរកូដដើម្បីឱ្យកុំព្យូទ័រអនុវត្តកិច្ចការជាក់លាក់។ លក្ខណៈសំខាន់ៗរួមមាន៖
- **ការណែនាំជាជំហានៗ:** កម្មវិធីគឺជាសំណុំនៃជំហានដែលកុំព្យូទ័រអនុវត្ត។
- **ភាសាសរសេរកម្មវិធី:** ប្រើភាសាដូចជា Python, Java, ឬ C++ ដើម្បីទំនាក់ទំនងជាមួយកុំព្យូទ័រ។
- **គោលបំណង:** បង្កើតកម្មវិធីដើម្បីដោះស្រាយបញ្ហា ឬបំពេញតម្រូវការជាក់លាក់។
- **ឧទាហរណ៍:** កម្មវិធីគណនាលេខ គេហទំព័រ ឬកម្មវិធីទូរស័ព្ទ។

---

## 2. ប្រវត្តិសង្ខេបនៃការសរសេរកម្មវិធី

ការសរសេរកម្មវិធីមានការវិវឌ្ឍយ៉ាងសំខាន់៖
- **១៨៤៣:** Ada Lovelace បានសរសេរកម្មវិធីដំបូងសម្រាប់ Analytical Engine របស់ Charles Babbage។
- **១៩៥៦:** ភាសា Fortran ត្រូវបានបង្កើតឡើងសម្រាប់ការគណនាវិទ្យាសាស្ត្រ។
- **១៩៧២:** ភាសា C ត្រូវបានអភិវឌ្ឍ ដែលជាមូលដ្ឋានសម្រាប់ភាសាទំនើបជាច្រើន។
- **១៩៩៥:** Java ត្រូវបានណែនាំ ដែលជួយអភិវឌ្ឍកម្មវិធី Cross-Platform។
- **២០០៨:** Python ក្លាយជាភាសាដ៏ពេញនិយមសម្រាប់ការអភិវឌ្ឍទូទៅ។
- **២៦៨១ (២០២៥):** ភាសាទំនើបដូចជា Rust, Go, និង TypeScript កំពុងត្រូវបានប្រើប្រាស់យ៉ាងទូលំទូលាយ។

---

## 3. ប្រភេទនៃភាសាសរសេរកម្មវិធី

ភាសាសរសេរកម្មវិធីត្រូវបានបែងចែកជាប្រភេទផ្សេងៗ៖
- **Low-Level Languages:** ដូចជា Assembly, ដែលនៅជិតភាសាម៉ាស៊ីន។
- **High-Level Languages:** ដូចជា Python, Java, និង JavaScript, ងាយស្រួលសម្រាប់មនុស្សអាន។
- **Scripting Languages:** ដូចជា Python និង JavaScript, ប្រើសម្រាប់ស្វ័យប្រវត្តិកម្ម។
- **Object-Oriented Languages:** ដូចជា Java និង C++, ផ្តោតលើ Objects និង Classes។
- **Functional Languages:** ដូចជា Haskell និង Scala, ផ្តោតលើ Functions។

---

## 4. តើកម្មវិធីដំណើរការយ៉ាងដូចម្តេច?

កម្មវិធីដំណើរការតាមជំហានដូចខាងក្រោម៖
- **ការសរសេរកូដ:** អ្នកសរសេរកូដដោយប្រើភាសាសរសេរកម្មវិធី។
- **ការបកប្រែ (Compilation):** កូដត្រូវបានបកប្រែទៅជាភាសាម៉ាស៊ីនដោយ Compiler ឬ Interpreter។
- **ការអនុវត្ត:** កុំព្យូទ័រអនុវត្តការណែនាំដែលបានបកប្រែ។
- **លទ្ធផល:** កម្មវិធីបង្ហាញលទ្ធផល ដូចជាអត្ថបទ រូបភាព ឬសកម្មភាពផ្សេងៗ។

---

## 5. ការប្រៀបធៀបភាសាសរសេរកម្មវិធី

| ភាសា         | គោលបំណង                        | គុណសម្បត្តិ                      | គុណវិបត្តិ                      |
| :------------ | :-------------------------------- | :-------------------------------- | :------------------------------- |
| **Python**    | ការអភិវឌ្ឍទូទៅ, AI, Web        | ងាយស្រួលរៀន, Versatile       | យឺតជាងភាសា Compiled          |
| **Java**      | Cross-Platform, Enterprise Apps  | Platform-independent, Stable     | Syntax ស្មុគស្មាញ               |
| **JavaScript**| Web Development                  | Browser-native, Dynamic          | Security Issues, Browser-dependency |
| **C++**       | System Programming, Games        | High Performance, Control        | Complex, Error-prone             |

**ឧទាហរណ៍កូដ Python សាមញ្ញ:**

\`\`\`python
# បង្ហាញសារសាមញ្ញ
print("សួស្តី! នេះជាកម្មវិធី Python!")
\`\`\`

នៅក្នុងឧទាហរណ៍ខាងលើ:
- **print()** ជាប់គ្នាបង្ហាញសារនៅលើអេក្រង់។
- កូដនេះសាមញ្ញ និងងាយយល់សម្រាប់អ្នកចាប់ផ្តើម។

---

## 6. ហេតុអ្វីត្រូវរៀនការសរសេរកម្មវិធី?

ការសរសេរកម្មវិធីផ្តល់អត្ថប្រយោជន៍ជាច្រើន៖
- **ដោះស្រាយបញ្ហា:** ជួយអ្នកគិតជាប្រព័ន្ធ និងតក្កវិជ្ជា។
- **ឱកាសការងារ:** តម្រូវការខ្ពស់សម្រាប់អ្នកអភិវឌ្ឍន៍។
- **ស្វ័យប្រវត្តិកម្ម:** សម្រួលការងារដដែលៗ។
- **ការច្នៃប្រឌិត:** អនុញ្ញាតឱ្យបង្កើតកម្មវិធី និងបច្ចេកវិទ្យាថ្មី។
- **សហគមន៍:** មានសហគមន៍អ្នកអភិវឌ្ឍន៍ដ៏ធំនៅលើ Stack Overflow និង GitHub។
`,
  examples: [
    `<h3>ឧទាហរណ៍៖ បង្ហាញសារជាមួយ Python</h3>
<p>បង្កើតកម្មវិធីសាមញ្ញដែលបង្ហាញសារនៅលើអេក្រង់។</p>
<pre><code class="language-python">
print("សួស្តី! នេះជាកម្មវិធី Python!")
</code></pre>
<hr>
<h3>ឧទាហរណ៍៖ កម្មវិធីគណនាសាមញ្ញ</h3>
<p>បង្កើតកម្មវិធីដែលគណនាផលបូកនៃលេខពីរដែលបញ្ចូលដោយអ្នកប្រើ។</p>
<pre><code class="language-python">
# ស្នើសុំលេខពីអ្នកប្រើ
num1 = float(input("បញ្ចូលលេខទី១: "))
num2 = float(input("បញ្ចូលលេខទី២: "))
# គណនាផលបូក
sum = num1 + num2
# បង្ហាញលទ្ធផល
print(f"ផលបូកនៃ {num1} និង {num2} គឺ: {sum}")
</code></pre>
`
  ],
  quiz: [
    {
      question: 'តើការសរសេរកម្មវិធីគឺជាអ្វី?',
      options: [
        'ការរចនារូបភាព',
        'ការសរសេរកូដដើម្បីឱ្យកុំព្យូទ័រអនុវត្តកិច្ចការ',
        'ការគ្រប់គ្រងម៉ាស៊ីន',
        'ការវិភាគទិន្នន័យ'
      ],
      correct: 1,
      explanation: 'ការសរសេរកម្មវិធីគឺជាការសរសេរកូដដើម្បីឱ្យកុំព្យូទ័រអនុវត្តកិច្ចការ។'
    },
    {
      question: 'តើនរណាត្រូវបានគេចាត់ទុកថាជាអ្នកសរសេរកម្មវិធីដំបូង?',
      options: [
        'Bill Gates',
        'Ada Lovelace',
        'Alan Turing',
        'Steve Jobs'
      ],
      correct: 1,
      explanation: 'Ada Lovelace ត្រូវបានគេចាត់ទុកថាជាអ្នកសរសេរកម្មវិធីដំបូង។'
    },
    {
      question: 'តើភាសាណាដែលងាយស្រួលរៀនសម្រាប់អ្នកចាប់ផ្តើម?',
      options: [
        'C++',
        'Assembly',
        'Python',
        'Java'
      ],
      correct: 2,
      explanation: 'Python មាន Syntax សាមញ្ញ និងងាយស្រួលរៀនសម្រាប់អ្នកចាប់ផ្តើម។'
    },
    {
      question: 'តើភាសា JavaScript ប្រើជាចម្បងសម្រាប់អ្វី?',
      options: [
        'System Programming',
        'Web Development',
        'Game Development',
        'Database Management'
      ],
      correct: 1,
      explanation: 'JavaScript ប្រើជាចម្បងសម្រាប់ Web Development។'
    },
    {
      question: 'តើអ្វីជាលក្ខណៈសំខាន់នៃ High-Level Language?',
      options: [
        'នៅជិតភាសាម៉ាស៊ីន',
        'ងាយស្រួលសម្រាប់មនុស្សអាន',
        'ប្រើសម្រាប់ Hardware ផ្ទាល់',
        'មានតែ Functions'
      ],
      correct: 1,
      explanation: 'High-Level Languages មាន Syntax ងាយស្រួលសម្រាប់មនុស្សអាន។'
    },
    {
      question: 'តើភាសា Fortran ត្រូវបានបង្កើតឡើងនៅឆ្នាំណា?',
      options: [
        '១៩៥៦',
        '១៩៧២',
        '១៯៩៥',
        '២៦៨១'
      ],
      correct: 0,
      explanation: 'Fortran ត្រូវបានបង្កើតឡើងនៅឆ្នាំ ១៩៥៦។'
    },
    {
      question: 'តើអ្វីជាគោលបំណងនៃការបកប្រែ (Compilation)?',
      options: [
        'បង្កើត UI',
        'បកប្រែកូដទៅជាភាសាម៉ាស៊ីន',
        'រចនារូបភាព',
        'គ្រប់គ្រង Database'
      ],
      correct: 1,
      explanation: 'Compilation បកប្រែកូដទៅជាភាសាម៉ាស៊ីន។'
    },
    {
      question: 'តើភាសា C++ ត្រូវបានប្រើជាចម្បងសម្រាប់អ្វី?',
      options: [
        'Web Development',
        'System Programming',
        'Scripting',
        'Data Analysis'
      ],
      correct: 1,
      explanation: 'C++ ត្រូវបានប្រើជាចម្បងសម្រាប់ System Programming និង Game Development។'
    },
    {
      question: 'តើអ្វីជាគុណសម្បត្តិសំខាន់នៃ Python?',
      options: [
        'Performance លឿន',
        'Syntax សាមញ្ញ និងងាយស្រួលរៀន',
        'Platform-dependent',
        'Complex Syntax'
      ],
      correct: 1,
      explanation: 'Python មាន Syntax សាមញ្ញ និងងាយស្រួលរៀន។'
    },
    {
      question: 'តើភាសាណាដែលប្រើសម្រាប់ Cross-Platform Development?',
      options: [
        'Assembly',
        'Java',
        'C',
        'Fortran'
      ],
      correct: 1,
      explanation: 'Java គឺជាភាសា Cross-Platform ដ៏ល្បីល្បាញ។'
    }
  ],
  lab: {
    task: `
បង្កើតកម្មវិធី Python សាមញ្ញមួយដែលបង្ហាញពីមូលដ្ឋាននៃការសរសេរកម្មវិធី។

**តម្រូវការ:**

1. **កម្មវិធីសាមញ្ញ:**
   - បង្កើតកម្មវិធី Python ដែលស្នើសុំឈ្មោះអ្នកប្រើ និងអាយុ។
   - បង្ហាញសារស្វាគមន៍ដែលមានឈ្មោះ និងអាយុរបស់អ្នកប្រើ។

2. **មុខងារគណនា:**
   - បន្ថែមមុខងារដែលគណនាឆ្នាំកំណើតរបស់អ្នកប្រើ (ផ្អែកលើអាយុ និងឆ្នាំបច្ចុប្បន្ន ២៦៨១)។
   - បង្ហាញសារដែលប្រាប់ពីឆ្នាំកំណើត។

3. **Basic Error Handling:**
   - ប្រើ try-except ដើម្បីគ្រប់គ្រងករណីដែលអ្នកប្រើបញ្ចូលអាយុមិនមែនជាលេខ។

**ការណែនាំ:** ដំឡើង Python និងប្រើ Text Editor (VS Code, PyCharm) ឬ Online IDE ដើម្បីសរសេរ និងសាកល្បងកម្មវិធី។
    `,
    solution: `
\`\`\`python
# កម្មវិធី Python សាមញ្ញ
try:
    # ស្នើសុំឈ្មោះ និងអាយុ
    name = input("បញ្ចូលឈ្មោះរបស់អ្នក: ")
    age = int(input("បញ្ចូលអាយុរបស់អ្នក: "))
    
    # គណនាឆ្នាំកំណើត
    current_year = 2681
    birth_year = current_year - age
    
    # បង្ហាញសារស្វាគមន៍
    print(f"សួស្តី {name}! អ្នកមានអាយុ {age} ឆ្នាំ។")
    print(f"អ្នកកើតនៅឆ្នាំ {birth_year}។")
except ValueError:
    print("សូមបញ្ចូលអាយុជាលេខ!")
\`\`\`
`
  }
};

export default ConceptLesson1_1Content;