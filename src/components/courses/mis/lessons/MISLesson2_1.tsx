import type { LessonContent } from '../../../../types/LessonTypes';

const MISLesson2_1Content: LessonContent = {
  title: 'មូលដ្ឋាននៃការរចនាមូលដ្ឋានទិន្នន័យ',
  objectives: [
    'យល់ដឹងអំពីគោលគំនិតជាមូលដ្ឋាននៃមូលដ្ឋានទិន្នន័យ',
    'ស្វែងយល់ពីសារៈសំខាន់នៃការរចនាមូលដ្ឋានទិន្នន័យនៅក្នុង MIS',
    'ស្គាល់គោលការណ៍នៃការរចនាមូលដ្ឋានទិន្នន័យដែលមានប្រសិទ្ធភាព',
    'យល់ពីប្រភេទនៃមូលដ្ឋានទិន្នន័យ និងការប្រើប្រាស់របស់វា',
    'បង្កើតកម្មវិធី Python សាមញ្ញសម្រាប់បង្ហាញទិន្នន័យមូលដ្ឋានទិន្នន័យ'
  ],
  content: `
# មូលដ្ឋាននៃការរចនាមូលដ្ឋានទិន្នន័យ 🗄️💾

---

**មូលដ្ឋានទិន្នន័យ (Database)** គឺជាប្រព័ន្ធដែលរៀបចំ និងរក្សាទុកទិន្នន័យដើម្បីឱ្យអាចចូលប្រើ និងគ្រប់គ្រងបានយ៉ាងងាយស្រួល។ ការរចនាមូលដ្ឋានទិន្នន័យគឺជាដំណើរការនៃការបង្កើតរចនាសម្ព័ន្ធដែលអនុញ្ញាតឱ្យទិន្នន័យត្រូវបានរក្សាទុក និងប្រើប្រាស់ប្រកបដោយប្រសិទ្ធភាពនៅក្នុងប្រព័ន្ធព័ត៌មានគ្រប់គ្រង (MIS)។

---

## 1. អ្វីទៅជាមូលដ្ឋានទិន្នន័យ?

មូលដ្ឋានទិន្នន័យគឺជាកន្លែងផ្ទុកទិន្នន័យដែលរៀបចំជាទម្រង់ជាក់លាក់ ដើម្បីឱ្យអាចស្វែងរក និងគ្រប់គ្រងបាន។ លក្ខណៈសំខាន់ៗរួមមាន៖
- **ការរៀបចំទិន្នន័យ:** ទិន្នន័យត្រូវបានរៀបចំជាតារាង ឬរចនាសម្ព័ន្ធផ្សេងៗ។
- **ប្រសិទ្ធភាព:** អនុញ្ញាតឱ្យចូលប្រើទិន្នន័យបានលឿន។
- **សុវត្ថិភាព:** ការពារទិន្នន័យពីការចូលប្រើដែលគ្មានការអនុញ្ញាត។
- **ភាពត្រឹមត្រូវ:** កាត់បន្ថយកំហុសក្នុងទិន្នន័យ។

ឧទាហរណ៍៖ មូលដ្ឋានទិន្នន័យរបស់ហាងលក់រាយអាចរក្សាទុកព័ត៌មានអតិថិជន ផលិតផល និងការលក់។

---

## 2. សារៈសំខាន់នៃការរចនាមូលដ្ឋានទិន្នន័យនៅក្នុង MIS

ការរចនាមូលដ្ឋានទិន្នន័យល្អគឺជាមូលដ្ឋានសម្រាប់ MIS ដែលមានប្រសិទ្ធភាព៖
- **គាំទ្រការសម្រេចចិត្ត:** ផ្តល់ទិន្នន័យត្រឹមត្រូវ និងទាន់ពេលវេលាសម្រាប់អ្នកគ្រប់គ្រង។
- **បង្កើនប្រសិទ្ធភាព:** កាត់បន្ថយភាពស្មុគស្មាញក្នុងការគ្រប់គ្រងទិន្នន័យ។
- **ធ្វើសមាហរណកម្ម:** ភ្ជាប់ទិន្នន័យពីនាឯកដ្ឋានផ្សេងៗ។
- **ការពង្រីក:** អនុញ្ញាតឱ្យមូលដ្ឋានទិន្នន័យអាចពង្រីកបាននៅពេលអាជីវកម្មរីកចម្រើន។

---

## 3. គោលការណ៍នៃការរចនាមូលដ្ឋានទិន្នន័យ

ការរចនាមូលដ្ឋានទិន្នន័យដែលមានប្រសិទ្ធភាពតម្រូវឱ្យអនុវត្តគោលការណ៍ដូចជា៖
- **ភាពសមស្រប (Consistency):** ទិន្នន័យមិនត្រូវមានភាពផ្ទុយគ្នា។
- **ភាពមិនស្ទួន (Non-redundancy):** ជៀសវាងការរក្សាទុកទិន្នន័យដដែលៗ។
- **ភាពងាយស្រួល (Accessibility):** ទិន្នន័យអាចចូលប្រើបានយ៉ាងងាយស្រួល។
- **ភាពបត់បែន (Flexibility):** អនុញ្ញាតឱ្យមានការកែប្រែនៅពេលតម្រូវការ។
- **Normalization:** រៀបចំទិន្នន័យជាទម្រង់ស្តង់ដារដើម្បីកាត់បន្ថយភាពមិនប្រក្រតី។

ឧទាហរណ៍៖ ការបែងចែកទិន្នន័យអតិថិជនទៅជាតារាងដាច់ដោយឡែក (ឧ. តារាងអតិថិជន និងតារាងការបញ្ជាទិញ) ដើម្បីជៀសវាងទិន្នន័យស្ទួន។

---

## 4. ប្រភេទនៃមូលដ្ឋានទិន្នន័យ

មានប្រភេទមូលដ្ឋានទិន្នន័យជាច្រើន ដែលប្រើក្នុង MIS៖
- **Relational Databases:** ប្រើតារាងដែលមានទំនាក់ទំនងគ្នា (ឧ. MySQL, PostgreSQL)។
- **NoSQL Databases:** សម្រាប់ទិន្នន័យមិនមានរចនាសម្ព័ន្ធច្បាស់លាស់ (ឧ. MongoDB)។
- **Hierarchical Databases:** ទិន្នន័យរៀបចំជាលំដាប់ថ្នាក់។
- **Network Databases:** ទិន្នន័យមានទំនាក់ទំនងស្មុគស្មាញ។

ឧទាហរណ៍៖ ក្រុមហ៊ុនអាចប្រើ MySQL ដើម្បីរក្សាទុកទិន្នន័យអតិថិជន និងការលក់ក្នុងទម្រង់តារាង។

---

## 5. ការប្រៀបធៀបប្រភេទមូលដ្ឋានទិន្នន័យ

| ប្រភេទ               | គុណសម្បត្តិ                       | គុណវិបត្តិ                       |
| :------------------- | :---------------------------------- | :-------------------------------- |
| **Relational**       | ងាយស្រួលគ្រប់គ្រង, ស្តង់ដារ     | មិនស័ក្តិសមសម្រាប់ទិន្នន័យធំ |
| **NoSQL**            | អាចពង្រីកបាន, បត់បែន            | ស្មុគស្មាញក្នុងការគ្រប់គ្រង     |
| **Hierarchical**     | លឿនសម្រាប់ទិន្នន័យថ្នាក់         | មិនបត់បែន                      |
| **Network**          | គ្រប់គ្រងទំនាក់ទំនងស្មុគស្មាញ     | ស្មុគស្មាញក្នុងការរចនា          |
--- 


## 6. ហេតុអ្វីត្រូវរៀនការរចនាមូលដ្ឋានទិន្នន័យ?

ការរចនាមូលដ្ឋានទិន្នន័យគឺសំខាន់សម្រាប់៖
- **ការគ្រប់គ្រងទិន្នន័យប្រកបដោយប្រសិទ្ធភាព:** ធ្វើឱ្យទិន្នន័យងាយស្រួលចូលប្រើ និងគ្រប់គ្រង។
- **គាំទ្រការសម្រេចចិត្ត:** ផ្តល់ទិន្នន័យត្រឹមត្រូវសម្រាប់ MIS។
- **កាត់បន្ថយកំហុស:** ការរចនាល្អកាត់បន្ថយទិន្នន័យស្ទួន និងភាពមិនប្រក្រតី។
- **ការពង្រីក:** អនុញ្ញាតឱ្យមូលដ្ឋានទិន្នន័យសម្របខ្លួនទៅនឹងតម្រូវការអាជីវកម្ម។
- **អាជីព:** ជំនាញក្នុងការរចនាមូលដ្ឋានទិន្នន័យមានតម្រូវការខ្ពស់នៅក្នុងវិស័យបច្ចេកវិទ្យា។
`,
  examples: [
    `<h3>ឧទាហរណ៍៖ បង្ហាញ Database Dashboard ជាមួយ Python/Tkinter</h3>
<p>បង្កើត Python App សាមញ្ញដែលបង្ហាញសារនៅកណ្តាល Window សម្រាប់ Database Dashboard។</p>
<pre><code class="language-python">
import tkinter as tk

# បង្កើត Window មេ
root = tk.Tk()
root.title("Database Dashboard")
root.geometry("400x300")

# បន្ថែម Label
label = tk.Label(root, text="សួស្តី! នេះជា Database Dashboard!", font=("Arial", 16))
label.pack(pady=50)

# ដំណើរការ App
root.mainloop()
</code></pre>
<hr>
<h3>ឧទាហរណ៍៖ បង្កើត Button សម្រាប់ Database Dashboard</h3>
<p>បន្ថែម Button ដែលបង្ហាញ Message Box នៅពេលចុច។</p>
<pre><code class="language-python">
import tkinter as tk
from tkinter import messagebox

def show_data():
    messagebox.showinfo("Database Dashboard", "សួស្តី! អ្នកបានចុច Button!")

# បង្កើត Window មេ
root = tk.Tk()
root.title("Database Dashboard")
root.geometry("400x300")

# បន្ថែម Label
label = tk.Label(root, text="សួស្តី! នេះជា Database Dashboard!", font=("Arial", 16))
label.pack(pady=50)

# បន្ថែម Button
button = tk.Button(root, text="ចុចដើម្បីមើលទិន្នន័យ", command=show_data, bg="green", fg="white", font=("Arial", 12))
button.pack(pady=20)

# ដំណើរការ App
root.mainloop()
</code></pre>
`
  ],
  quiz: [
    {
      question: 'តើមូលដ្ឋានទិន្នន័យគឺជាអ្វី?',
      options: [
        'ភាសាសរសេរកម្មវិធី',
        'ប្រព័ន្ធសម្រាប់រៀបចំ និងរក្សាទុកទិន្នន័យ',
        'ឧបករណ៍គ្រប់គ្រងផ្នែករឹង',
        'ប្រព័ន្ធបណ្តាញសង្គម'
      ],
      correct: 1,
      explanation: 'មូលដ្ឋានទិន្នន័យគឺជាប្រព័ន្ធសម្រាប់រៀបចំ និងរក្សាទុកទិន្នន័យ។'
    },
    {
      question: 'តើអ្វីជាគោលការណ៍សំខាន់នៃការរចនាមូលដ្ឋានទិន្នន័យ?',
      options: [
        'បង្កើតទិន្នន័យស្ទួន',
        'ភាពមិនស្ទួន និងភាពសមស្រប',
        'ការគ្រប់គ្រងផ្នែករឹង',
        'ការបង្កើត UI'
      ],
      correct: 1,
      explanation: 'គោលការណ៍សំខាន់រួមមានភាពមិនស្ទួន និងភាពសមស្រប។'
    },
    {
      question: 'តើ Relational Database ប្រើអ្វីសម្រាប់រៀបចំទិន្នន័យ?',
      options: [
        'តារាងដែលមានទំនាក់ទំនងគ្នា',
        'ទិន្នន័យមិនមានរចនាសម្ព័ន្ធ',
        'បណ្តាញសង្គម',
        'ភាសាសរសេរកម្មវិធី'
      ],
      correct: 0,
      explanation: 'Relational Database ប្រើតារាងដែលមានទំនាក់ទំនងគ្នា។'
    },
    {
      question: 'តើអ្វីជាអត្ថប្រយោជន៍នៃការរចនាមូលដ្ឋានទិន្នន័យល្អ?',
      options: [
        'បង្កើតកម្មវិធី Mobile',
        'កាត់បន្ថយទិន្នន័យស្ទួន និងបង្កើនប្រសិទ្ធភាព',
        'គ្រប់គ្រងផ្នែករឹង',
        'បង្កើតបណ្តាញអ៊ីនធឺណិត'
      ],
      correct: 1,
      explanation: 'ការរចនាល្អកាត់បន្ថយទិន្នន័យស្ទួន និងបង្កើនប្រសិទ្ធភាព។'
    },
    {
      question: 'តើប្រភេទមូលដ្ឋានទិន្នន័យណាដែលស័ក្តិសមសម្រាប់ទិន្នន័យធំ?',
      options: [
        'Relational Database',
        'NoSQL Database',
        'Hierarchical Database',
        'Network Database'
      ],
      correct: 1,
      explanation: 'NoSQL Database ស័ក្តិសមសម្រាប់ទិន្នន័យធំ និងបត់បែន។'
    }
  ],
  lab: {
    task: `
បង្កើត Python App សាមញ្ញមួយដែលបង្ហាញអំពី Database Dashboard ជាមូលដ្ឋានដោយប្រើ Tkinter។

**តម្រូវការ:**

1. **App Structure:**
   - បង្កើត Window មេដោយប្រើ Tkinter។
   - កំណត់ Title នៃ App ជា "Database Dashboard Lab"។

2. **Main Content:**
   - បន្ថែម Label ដែលបង្ហាញសារ "សួស្តី! នេះជា Database Dashboard!" នៅកណ្តាល Window។
   - បន្ថែម Button ដែលនៅពេលចុច បង្ហាញ Message Box ជាមួយសារ "ទិន្នន័យមូលដ្ឋានទិន្នន័យត្រូវបានបើក!"។

3. **Basic Styling:**
   - កំណត់ Font Size ជា 16 សម្រាប់ Label។
   - បន្ថែម Basic Styling សម្រាប់ Button (ឧទាហរណ៍៖ ពណ៌ផ្ទៃខាងក្រោយជាពណ៌បៃតង)។

**ការណែនាំ:** ដំឡើង Python និង Tkinter (ជាប់ជាមួយ Python ដោយស្វ័យប្រវត្តិ)។ សាកល្បង App នៅលើកុំព្យូទ័ររបស់អ្នក។
    `,
    solution: `
\`\`\`python
import tkinter as tk
from tkinter import messagebox

def show_data():
    messagebox.showinfo("Database Dashboard", "ទិន្នន័យមូលដ្ឋានទិន្នន័យត្រូវបានបើក!")

# បង្កើត Window មេ
root = tk.Tk()
root.title("Database Dashboard Lab")
root.geometry("400x300")

# បន្ថែម Label
label = tk.Label(root, text="សួស្តី! នេះជា Database Dashboard!", font=("Arial", 16))
label.pack(pady=50)

# បន្ថែម Button
button = tk.Button(root, text="បើកទិន្នន័យ", command=show_data, bg="green", fg="white", font=("Arial", 12))
button.pack(pady=20)

# ដំណើរការ App
root.mainloop()
\`\`\`
`
  }
};

export default MISLesson2_1Content;