import type { LessonContent } from '../../../../types/LessonTypes';

const SEMLesson5_3Content: LessonContent = {
  title: 'ការគ្រប់គ្រងកំណែ Software (Configuration Management)',
  objectives: [
    'យល់ដឹងពីគោលគំនិត Software Configuration Management (SCM)',
    'ស្គាល់ពីសារៈសំខាន់នៃ SCM ក្នុងការគ្រប់គ្រងគម្រោង',
    'រៀនពីធាតុផ្សំសំខាន់ៗនៃ SCM (Baselines, Version Control)',
    'យល់ពីរបៀបប្រើប្រាស់ Git ជាឧបករណ៍ SCM',
    'អនុវត្តការប្រើប្រាស់ Git Commands សម្រាប់គ្រប់គ្រងកូដ'
  ],
  content: `
# ការគ្រប់គ្រងកំណែ Software (Configuration Management) ⚙️

---

**Software Configuration Management (SCM)** គឺជាដំណើរការនៃការគ្រប់គ្រងការផ្លាស់ប្តូរដែលបានកើតឡើងនៅក្នុង Software ពេញមួយវដ្តជីវិតរបស់វា។ គោលបំណងគឺដើម្បីរក្សាភាពស៊ីសង្វាក់គ្នានិងស្ថេរភាពនៃផលិតផល។

---

## 1. សារៈសំខាន់នៃ SCM

- **តាមដានការផ្លាស់ប្តូរ:** ជួយតាមដានរាល់ការផ្លាស់ប្តូរដែលកើតឡើងនៅក្នុងកូដនិងឯកសារ។
- **ការសហការក្រុម:** អនុញ្ញាតឱ្យសមាជិកក្រុមជាច្រើនធ្វើការលើកូដតែមួយក្នុងពេលតែមួយដោយគ្មានការប៉ះទង្គិច។
- **ការត្រលប់ក្រោយ:** អនុញ្ញាតឱ្យត្រលប់ទៅកំណែចាស់វិញប្រសិនបើមានបញ្ហានៅក្នុងកំណែថ្មី។
- **ការគ្រប់គ្រងហានិភ័យ:** កាត់បន្ថយហានិភ័យនៃការបាត់បង់កូដឬការបំផ្លាញគម្រោង។

---

## 2. ធាតុផ្សំសំខាន់ៗនៃ SCM

- **Configuration Item (CI):** ជាឯកសារ, កូដ, ឬឧបករណ៍ណាមួយដែលត្រូវគ្រប់គ្រង។
- **Baseline:** គឺជាកំណែដែលបានអនុម័តនិងចងក្រងជាផ្លូវការនៃ Software ។ វាមិនអាចផ្លាស់ប្តូរបានទេបើគ្មានសំណើសុំផ្លាស់ប្តូរ។
- **Version Control:** ជាប្រព័ន្ធដែលតាមដានការផ្លាស់ប្តូរកូដ។ ឧទាហរណ៍: Git, Subversion។
- **Configuration Audit:** ជាដំណើរការត្រួតពិនិត្យដើម្បីធានាថាការផ្លាស់ប្តូរទាំងអស់ត្រូវបានអនុវត្តន៍ត្រឹមត្រូវតាមផែនការ។

---

## 3. Git ជាឧបករណ៍ SCM

**Git** គឺជាប្រព័ន្ធគ្រប់គ្រងកំណែដែលពេញនិយមបំផុតសម្រាប់វិស្វករ Software ។ វាអនុញ្ញាតឱ្យក្រុមអាចធ្វើការរួមគ្នាបានយ៉ាងងាយស្រួល។

**Git Commands សំខាន់ៗ:**
- **git clone:** ចម្លង Repository ពី Server ទៅកុំព្យូទ័ររបស់អ្នក។
- **git status:** មើលស្ថានភាពឯកសារបច្ចុប្បន្ន។
- **git add:** បន្ថែមឯកសារដែលបានផ្លាស់ប្តូរទៅក្នុង Staging Area ។
- **git commit:** រក្សាទុកការផ្លាស់ប្តូរទៅក្នុង Local Repository ។
- **git pull:** ទាញយកការផ្លាស់ប្តូរចុងក្រោយពី Server ។
- **git push:** បញ្ជូនការផ្លាស់ប្តូរទៅ Server ។
- **git branch:** បង្កើត Branch ថ្មីដើម្បីធ្វើការលើមុខងារថ្មី។

---

## 4. ឧទាហរណ៍ជាក់ស្តែង

**សេណារីយ៉ូ:** អ្នកនិងមិត្តរួមក្រុមរបស់អ្នកកំពុងធ្វើការលើគម្រោងកូដតែមួយ។

1. **ស្ថានភាព:** មិត្តរបស់អ្នកទើបតែបន្ថែមមុខងារថ្មីទៅក្នុងកូដរួម។
2. **តួនាទីរបស់អ្នក:** អ្នកត្រូវទាញយកការផ្លាស់ប្តូរនោះមកកុំព្យូទ័ររបស់អ្នកមុននឹងចាប់ផ្តើមការងារថ្មី។
3. **ការអនុវត្តន៍:** អ្នកត្រូវប្រើ **\`git pull\`** ដើម្បីទាញយកការផ្លាស់ប្តូរពី Server ។ បន្ទាប់ពីបញ្ចប់ការងាររបស់អ្នក អ្នកត្រូវប្រើ **\`git add\`**, **\`git commit\`**, និង **\`git push\`** ដើម្បីបញ្ជូនការផ្លាស់ប្តូររបស់អ្នកទៅកាន់ Server ។
`,
  examples: [
    `### ឧទាហរណ៍: ការប្រើប្រាស់ Git Commands

1.  **អ្នកចាប់ផ្តើមគម្រោងថ្មី:**
    \`\`\`bash
    git init
    git add .
    git commit -m "Initial commit"
    \`\`\`

2.  **អ្នកផ្លាស់ប្តូរការងារលើ Branch ថ្មី:**
    \`\`\`bash
    git branch feature/new-login
    git checkout feature/new-login
    # ធ្វើការផ្លាស់ប្តូរ
    git add .
    git commit -m "Added new login feature"
    git push origin feature/new-login
    \`\`\`
`
  ],
  quiz: [
    {
      question: 'តើអ្វីជាគោលបំណងសំខាន់នៃ SCM?',
      options: ['ការសរសេរកូដ', 'ការគ្រប់គ្រងការផ្លាស់ប្តូរ Software', 'ការធ្វើតេស្ត', 'ការគ្រប់គ្រងថវិកា'],
      correct: 1,
      explanation: 'SCM ផ្តោតលើការគ្រប់គ្រងការផ្លាស់ប្តូរនៅក្នុង Software ។'
    },
    {
      question: 'តើ Git ជាប្រភេទឧបករណ៍អ្វី?',
      options: ['Project Management Tool', 'Integrated Development Environment (IDE)', 'Version Control System (VCS)', 'Testing Tool'],
      correct: 2,
      explanation: 'Git គឺជាប្រព័ន្ធគ្រប់គ្រងកំណែ (Version Control System) ។'
    },
    {
      question: 'តើ Baseline មានន័យដូចម្តេច?',
      options: ['កំណែចុងក្រោយនៃ Software', 'កំណែដែលបានអនុម័តនិងចងក្រងជាផ្លូវការ', 'កូដដែលបានលុបចោល', 'ការផ្លាស់ប្តូរតូចមួយ'],
      correct: 1,
      explanation: 'Baseline គឺជាកំណែដែលបានអនុម័តជាផ្លូវការនិងអាចផ្លាស់ប្តូរបានតែតាមរយៈសំណើសុំផ្លាស់ប្តូរ។'
    },
    {
      question: 'តើ git commit ប្រើដើម្បីអ្វី?',
      options: ['ដើម្បីលុបកូដ', 'ដើម្បីបញ្ជូនការផ្លាស់ប្តូរទៅ Server', 'ដើម្បីរក្សាទុកការផ្លាស់ប្តូរទៅក្នុង Local Repository', 'ដើម្បីទាញយកកូដ'],
      correct: 2,
      explanation: 'git commit ប្រើដើម្បីរក្សាទុកការផ្លាស់ប្តូរនៅក្នុង Local Repository របស់អ្នក។'
    },
    {
      question: 'តើអ្វីជាអត្ថប្រយោជន៍មួយនៃការប្រើប្រាស់ SCM?',
      options: ['ការបាត់បង់កូដ', 'ការត្រលប់ទៅកំណែចាស់វិញ', 'ការកាត់បន្ថយការងារ', 'ការបង្កើនហានិភ័យ'],
      correct: 1,
      explanation: 'SCM អនុញ្ញាតឱ្យអ្នកត្រលប់ទៅកំណែចាស់វិញនៅពេលមានបញ្ហា។'
    },
    {
      question: 'តើ git pull ធ្វើអ្វី?',
      options: ['បញ្ជូនកូដទៅ Server', 'ទាញយកកូដពី Server', 'បង្កើត Branch ថ្មី', 'រក្សាទុកកូដ'],
      correct: 1,
      explanation: 'git pull ទាញយកការផ្លាស់ប្តូរចុងក្រោយពី Server មកកាន់កុំព្យូទ័ររបស់អ្នក។'
    },
    {
      question: 'តើ SCM ជួយសម្រួលការសហការក្រុមដោយរបៀបណា?',
      options: ['ធ្វើការតែម្នាក់ឯង', 'អនុញ្ញាតឱ្យសមាជិកជាច្រើនធ្វើការលើកូដតែមួយ', 'បង្កើនការយល់ច្រឡំ', 'មិនមានផលប៉ះពាល់'],
      correct: 1,
      explanation: 'SCM អនុញ្ញាតឱ្យសមាជិកក្រុមជាច្រើនអាចធ្វើការលើកូដតែមួយបានដោយសុវត្ថិភាព។'
    },
    {
      question: 'តើការផ្លាស់ប្តូរតូចមួយនៅក្នុងកូដត្រូវបានគេហៅថាអ្វី?',
      options: ['Configuration Item', 'Baseline', 'Commit', 'Audit'],
      correct: 2,
      explanation: 'ការផ្លាស់ប្តូរដែលបានរក្សាទុកទៅក្នុង Repository ត្រូវបានគេហៅថា Commit ។'
    },
    {
      question: 'តើការគ្រប់គ្រងកំណែជួយកាត់បន្ថយហានិភ័យអ្វីខ្លះ?',
      options: ['ហានិភ័យហិរញ្ញវត្ថុ', 'ហានិភ័យបាត់បង់កូដ', 'ហានិភ័យទីផ្សារ', 'ហានិភ័យបាត់បង់បុគ្គលិក'],
      correct: 1,
      explanation: 'ការគ្រប់គ្រងកំណែជួយការពារការបាត់បង់កូដ។'
    }
  ],
  lab: {
    task: `
**សេណារីយ៉ូ:** អ្នកត្រូវបានគេប្រគល់ភារកិច្ចឱ្យបង្កើត Git Repository ថ្មីមួយសម្រាប់គម្រោង Website របស់ក្រុមហ៊ុន។

**តម្រូវការ:**
1.  សរសេរ Git Commands ដើម្បីបង្កើត Repository ថ្មីនិងបន្ថែមឯកសារដំបូង។
2.  ពន្យល់ពីជំហាននីមួយៗដែលអ្នកបានសរសេរ។
    `,
    solution: `
**ការប្រើប្រាស់ Git Commands ដើម្បីចាប់ផ្តើមគម្រោង**

**១. Git Commands:**
   
   ***ជំហានទី ១:*** បង្កើត Git Repository ថ្មី
   \`git init\`

   ***ជំហានទី ២:*** បន្ថែមឯកសារទាំងអស់ទៅក្នុង Staging Area
   \`git add . \`

   ***ជំហានទី ៣:*** រក្សាទុកការផ្លាស់ប្តូរជា Commit ដំបូង
   \` git commit -m "Initial project setup" \`

   ***ជំហានទី ៤:*** បង្កើត Branch មេ (ប្រសិនបើមិនមាន)
   \` git branch -M main \`

   ***ជំហានទី ៥:*** ភ្ជាប់ទៅកាន់ Remote Repository
   \` git remote add origin https://github.com/your-username/your-repo-name.git \`

   ***ជំហានទី ៦:*** បញ្ជូនកូដទៅកាន់ GitHub
   \` git push -u origin main \`


**២. ការពន្យល់:**
   - **\`git init\`** ចាប់ផ្តើម Git Repository ថ្មីនៅក្នុងថតដែលអ្នកកំពុងនៅ។
   - **\`git add .\`** ដាក់ឯកសារទាំងអស់ដែលបានផ្លាស់ប្តូរទៅក្នុង Staging Area ដើម្បីត្រៀមរក្សាទុក។
   - **\`git commit -m "..."\`** រក្សាទុកការផ្លាស់ប្តូរ។ \`-m\` គឺជាសារសម្រាប់ Commit ។
   - **\`git branch -M main\`** ប្តូរឈ្មោះ Branch មេទៅជា "main" ។
   - **\`git remote add origin ...\`** ភ្ជាប់ Local Repository ទៅកាន់ Remote Repository នៅលើ GitHub ។
   - **\`git push -u origin main\`** បញ្ជូនកូដពី Local Repository ទៅកាន់ Remote Repository នៅលើ GitHub ជាលើកដំបូង។
`
  }
};

export default SEMLesson5_3Content;