import type { LessonContent } from '../../../../types/LessonTypes';

const TerminologyLesson3_2Content: LessonContent = {
  title: 'វាក្យស័ព្ទទាក់ទងនឹងរង្វិលជុំ',
  objectives: [
    'យល់ពីអត្ថន័យនៃវាក្យស័ព្ទទាក់ទងនឹងរង្វិលជុំ (Loop Terms)',
    'ស្គាល់ពាក្យសំខាន់ៗដូចជា for, while, និង break',
    'រៀនការប្រើរង្វិលជុំក្នុង Python',
    'ស្វែងយល់ពីការប្រើរង្វិលជុំដើម្បីធ្វើការងារម្តងហើយម្តងទៀត',
    'អនុវត្តការប្រើវាក្យស័ព្ទរង្វិលជុំក្នុងកម្មវិធីសាមញ្ញ'
  ],
  content: `
# វាក្យស័ព្ទទាក់ទងនឹងរង្វិលជុំ 🔄💻

---

**វាក្យស័ព្ទទាក់ទងនឹងរង្វិលជុំ (Loop Terms)** គឺជាពាក្យបច្ចេកទេសដែលប្រើសម្រាប់ធ្វើការងារម្តងហើយម្តងទៀតនៅក្នុងកម្មវិធី។

---

## 1. អ្វីទៅជា Loop Terms?

- **Loop Terms:** ពាក្យដែលប្រើសម្រាប់ធ្វើឱ្យកម្មវិធីដំណើរការម្តងហើយម្តងទៀត។
- **សារៈសំខាន់:**
  - ជួយសន្សំសំចៃពេលវេលាដោយធ្វើការងារដដែលៗដោយស្វ័យប្រវត្តិ។
  - អនុញ្ញាត Edison គឺជាបច្ចេកទេសសម្រាប់ធ្វើឱ្យកូដអាចអានបាន។
  - ប្រើសម្រាប់គ្រប់គ្រងលំហូរនៃកម្មវិធី។

**ពាក្យសំខាន់ៗ:**
- **for:** ធ្វើរង្វិលជុំលើជួរឬបញ្ជី។
- **while:** ធ្វើរង្វិលជុំដរាបណាលក្ខខណ្ឌនៅតែពិត។
- **break:** បញ្ឈប់រង្វិលជុំភ្លាមៗ។
- **continue:** រំលងទៅវដ្តបន្ទាប់នៃរង្វិលជុំ។

---

## 2. ការប្រើ Loop Terms ក្នុង Python

- **for Loop:**
  \`\`\`python
  for i in range(5):
      print(i)  # បង្ហាញ: 0, 1, 2, 3, 4
  \`\`\`
- **while Loop:**
  \`\`\`python
  count = 0
  while count < 5:
      print(count)
      count += 1  # បង្ហាញ: 0, 1, 2, 3, 4
  \`\`\`
- **break Statement:**
  \`\`\`python
  for i in range(10):
      if i == 5:
          break
      print(i)  # បង្ហាញ: 0, 1, 2, 3, 4
  \`\`\`
- **continue Statement:**
  \`\`\`python
  for i in range(5):
      if i == 3:
          continue
      print(i)  # បង្ហាញ: 0, 1, 2, 4
  \`\`\`

---

## 3. ការអនុវត្តក្នុងកម្មវិធី

**ឧទាហរណ៍កូដ:**

\`\`\`python
# ប្រើ for loop ដើម្បីបង្ហាញលេខគូ
for num in range(10):
    if num % 2 == 0:
        print(f"{num} ជាលេខគូ")  # បង្ហាញ: 0, 2, 4, 6, 8
\`\`\`

**ឧទាហរណ៍ជាមួយ while:**

\`\`\`python
count = 1
while count <= 10:
    print(f"លេខ: {count}")
    count += 2  # បង្ហាញ: 1, 3, 5, 7, 9
\`\`\`

---

## 4. ហេតុអ្វីសំខាន់?

- **ការសន្សំសំចៃពេលវេលា:** អនុញ្ញាតឱ្យធ្វើការងារដដែលៗដោយស្វ័យប្រវត្តិ។
- **ភាពបត់បែន:** អាចគ្រប់គ្រងទិន្នន័យជាច្រើនបាន។
- **ភាពងាយអាន:** ធ្វើឱ្យកូដមានអត្ថន័យ និងងាយយល់។
`,
  examples: [
    `<h3>ឧទាហរណ៍៖ ការប្រើ for loop</h3>
<p>ប្រើ for loop ដើម្បីបង្ហាញលេខគូ។</p>
<pre><code class="language-python">
for num in range(10):
    if num % 2 == 0:
        print(f"{num} ជាលេខគូ")  # បង្ហាញ: 0, 2, 4, 6, 8
</code></pre>
<hr>
<h3>ឧទាហរណ៍៖ ការប្រើ while loop</h3>
<p>ប្រើ while loop ដើម្បីបង្ហាញលេខសេស។</p>
<pre><code class="language-python">
count = 1
while count <= 10:
    print(f"លេខ: {count}")
    count += 2  # បង្ហាញ: 1, 3, 5, 7, 9
</code></pre>
`
  ],
  quiz: [
    {
      question: 'តើ Loop Terms ប្រើសម្រាប់អ្វី?',
      options: [
        'ផ្ទុកទិន្នន័យ',
        'ធ្វើការងារម្តងហើយម្តងទៀត',
        'សម្រេចចិត្តក្នុងកម្មវិធី',
        'គ្រប់គ្រង Hardware'
      ],
      correct: 1,
      explanation: 'Loop Terms ប្រើសម្រាប់ធ្វើការងារម្តងហើយម្តងទៀត។'
    },
    {
      question: 'តើពាក្យ `for` មានន័យអ្វី?',
      options: [
        'បង្ហាញទិន្នន័យ',
        'ធ្វើរង្វិលជុំលើជួរឬបញ្ជី',
        'ពិនិត្យលក្ខខណ្ឌ',
        'ផ្ទុកទិន្នន័យ'
      ],
      correct: 1,
      explanation: '`for` ប្រើសម្រាប់ធ្វើរង្វិលជុំលើជួរឬបញ្ជី។'
    },
    {
      question: 'តើពាក្យ `while` ធ្វើអ្វី?',
      options: [
        'បញ្ឈប់រង្វិលជុំ',
        'ធ្វើរង្វិលជុំដរាបណាលក្ខខណ្ឌពិត',
        'រំលងទៅវដ្តបន្ទាប់',
        'ផ្ទុកទិន្នន័យ'
      ],
      correct: 1,
      explanation: '`while` ធ្វើរង្វិលជុំដរាបណាលក្ខខណ្ឌនៅតែពិត។'
    },
    {
      question: 'តើអ្វីជាលទ្ធផលនៃកូດខាងក្រោម?\n```python\nfor i in range(5):\n    print(i)\n```',
      options: ['0, 1, 2, 3, 4', '1, 2, 3, 4, 5', '0, 2, 4', 'Error'],
      correct: 0,
      explanation: '`range(5)` បង្កើតលេខ 0, 1, 2, 3, 4។'
    },
    {
      question: 'តើពាក្យ `break` ប្រើសម្រាប់អ្វី?',
      options: [
        'ផ្ទុកទិន្នន័យ',
        'បញ្ឈប់រង្វិលជុំភ្លាមៗ',
        'ធ្វើការងារម្តងហើយម្តងទៀត',
        'បង្ហាញទិន្នន័យ'
      ],
      correct: 1,
      explanation: '`break` បញ្ឈប់រង្វិលជុំភ្លាមៗ។'
    },
    {
      question: 'តើអ្វីជាលទ្ធផលនៃកូដខាងក្រោម?\n```python\ncount = 0\nwhile count < 3:\n    print(count)\n    count += 1\n```',
      options: ['0, 1, 2', '1, 2, 3', '0, 2, 4', 'Error'],
      correct: 0,
      explanation: '`while count < 3` បង្ហាញ 0, 1, 2។'
    },
    {
      question: 'តើ Loop Terms ជួយអ្វី?',
      options: [
        'បង្កើនភាពស្មុគស្មាញ',
        'សន្សំសំចៃពេលវេលាដោយធ្វើការងារដដែលៗ',
        'បង្កើត UI',
        'គ្រប់គ្រង Hardware'
      ],
      correct: 1,
      explanation: 'Loop Terms សន្សំសំចៃពេលវេលាដោយធ្វើការងារដដែលៗ។'
    },
    {
      question: 'តើអ្វីជាលទ្ធផលនៃកូដខាងក្រោម?\n```python\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)\n```',
      options: ['0, 1, 3, 4', '0, 1, 2, 3, 4', '2', 'Error'],
      correct: 0,
      explanation: '`continue` រំលង i=2 ដូច្នេះបង្ហាញ 0, 1, 3, 4។'
    },
    {
      question: 'តើកូដខាងក្រោមមានប៉ុន្មានលទ្ធផលដែលអាចកើតមាន?\n```python\nfor num in range(4):\n    if num % 2 == 0:\n        print("គូ")\n    else:\n        print("សេស")\n```',
      options: ['1', '2', '3', '4'],
      correct: 1,
      explanation: 'កូដនេះមាន 2 លទ្ធផលអាចកើតមាន: "គូ" ឬ "សេស"។'
    },
    {
      question: 'តើ `for` ខុសពី `while` ដោយរបៀបណា?',
      options: [
        '`for` ប្រើសម្រាប់ជួរឬបញ្ជី, `while` ប្រើលក្ខខណ្ឌ',
        '`for` មិនអនុញ្ញាតឱ្យធ្វើរង្វិលជុំ',
        '`while` ប្រើសម្រាប់ផ្ទុកទិន្នន័យ',
        '`for` ប្រើសម្រាប់សម្រេចចិត្ត'
      ],
      correct: 0,
      explanation: '`for` ប្រើសម្រាប់ជួរឬបញ្ជី, `while` ប្រើលក្ខខណ្ឌ។'
    },
    {
      question: 'តើអ្វីជាលទ្ធផលនៃកូដខាងក្រោម?\n```python\nfor i in range(6):\n    if i == 3:\n        break\n    print(i)\n```',
      options: ['0, 1, 2', '0, 1, 2, 3', '3', 'Error'],
      correct: 0,
      explanation: '`break` បញ្ឈប់រង្វិលជុំនៅ i=3 ដូច្នេះបង្ហាញ 0, 1, 2។'
    },
    {
      question: 'តើ Loop Terms ធ្វើឱ្យកូដមានអត្ថន័យដោយរបៀបណា?',
      options: [
        'បង្កើនភាពស្មុគស្មាញ',
        'ធ្វើឱ្យកូដងាយអាន និងច្បាស់លាស់',
        'បង្កើត UI',
        'គ្រប់គ្រង Hardware'
      ],
      correct: 1,
      explanation: 'Loop Terms ធ្វើឱ្យកូដងាយអាន និងច្បាស់លាស់។'
    }
  ],
  lab: {
    task: `
បង្កើតកម្មវិធី Python ដែលប្រើ Loop Terms។

**តម្រូវការ:**
1. **ការបញ្ចូលទិន្នន័យ:**
   - ស្នើសុំឈ្មោះអ្នកប្រើ (String)។
   - ស្នើសុំចំនួនលេខដែលចង់បង្ហាញ (Integer)។
2. **ការអនុវត្ត:**
   - បង្កើត Variable សម្រាប់ឈ្មោះ និងចំនួន។
   - ប្រើ \`for\` loop ដើម្បីបង្ហាញលេខពី 1 ដល់ចំនួនដែលបញ្ចូល។
   - ប្រើ \`if\` ដើម្បីពិនិត្យថាតើលេខនោះជាលេខគូឬសេស។
   - បង្ហាញសារជាមួយឈ្មោះ និងលទ្ធផល។
3. **ការបង្ហាញលទ្ធផល:**
   - បង្ហាញសារដូចជា: "[ឈ្មោះ]: លេខ [លេខ] ជា [គូ/សេស]"។
4. **Error Handling:**
   - ប្រើ \`try-except\` ដើម្បីគ្រប់គ្រងករណីចំនួនមិនមែនជាលេខគត់។

**ការណែនាំ:** ប្រើ VS Code ឬ PyCharm ដើម្បីសរសេរកម្មវិធី។
    `,
    solution: `
\`\`\`python
try:
    # Variable សម្រាប់ផ្ទុកឈ្មោះ
    user_name = input("បញ្ចូលឈ្មោះរបស់អ្នក: ")
    if not user_name.strip():
        raise ValueError("ឈ្មោះមិនអាចទទេបាន!")
    
    # Variable សម្រាប់ផ្ទុកចំនួន
    number = int(input("បញ្ចូលចំនួនលេខដែលអ្នកចង់បង្ហាញ: "))
    
    # ប្រើ for loop ដើម្បីបង្ហាញលេខគូឬសេស
    for i in range(1, number + 1):
        if i % 2 == 0:
            print(f"{user_name}: លេខ {i} ជាលេខគូ")
        else:
            print(f"{user_name}: លេខ {i} ជាលេខសេស")
except ValueError as e:
    print(f"កំហុស: {e}")
\`\`\`
`
  }
};

export default TerminologyLesson3_2Content;