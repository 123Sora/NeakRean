import type { LessonContent } from '../../../../types/LessonTypes';

const MISLesson2_1Content: LessonContent = {
  title: 'មូលដ្ឋានគ្រឹះនៃមូលដ្ឋានទិន្នន័យ',
  objectives: [
    'យល់ដឹងពីនិយមន័យ និងសារៈសំខាន់នៃមូលដ្ឋានទិន្នន័យ',
    'ស្គាល់ពីគំរូទិន្នន័យ (Data Models) ផ្សេងៗគ្នា',
    'រៀនពីសមាសធាតុសំខាន់ៗនៃប្រព័ន្ធមូលដ្ឋានទិន្នន័យ',
    'យល់ពីតួនាទីរបស់ DBMS (Database Management System)',
    'អនុវត្តការរចនាមូលដ្ឋានទិន្នន័យសាមញ្ញ'
  ],
  content: `
# មូលដ្ឋានគ្រឹះនៃមូលដ្ឋានទិន្នន័យ 🗄️💾

---

**មូលដ្ឋានទិន្នន័យ (Database)** គឺជាបណ្តុំទិន្នន័យដែលមានរចនាសម្ព័ន្ធដែលត្រូវបានរក្សាទុកក្នុងប្រព័ន្ធកុំព្យូទ័រ។ វារួមបញ្ចូលទិន្នន័យដែលទាក់ទងគ្នា និងត្រូវបានរៀបចំឡើងដើម្បីឱ្យមានភាពងាយស្រួលក្នុងការគ្រប់គ្រង, ធ្វើបច្ចុប្បន្នភាព, និងទាញយក។ មូលដ្ឋានទិន្នន័យគឺជាបេះដូងនៃប្រព័ន្ធព័ត៌មានគ្រប់គ្រង (MIS) ទាំងអស់។

---

## 1. ហេតុអ្វីបានជាមូលដ្ឋានទិន្នន័យសំខាន់?

មុនពេលមានមូលដ្ឋានទិន្នន័យ ស្ថាប័ននានាប្រើប្រាស់ឯកសារ (Files) ដាច់ដោយឡែកពីគ្នា។ នេះបណ្តាលឱ្យមានបញ្ហាជាច្រើនដូចជា៖

- **ភាពដដែលនៃទិន្នន័យ (Data Redundancy):** ព័ត៌មានដូចគ្នាត្រូវបានរក្សាទុកនៅកន្លែងច្រើនដង។
- **ភាពមិនស៊ីគ្នានៃទិន្នន័យ (Data Inconsistency):** ទិន្នន័យដូចគ្នាប៉ុន្តែមានតម្លៃខុសគ្នា។
- **ភាពលំបាកក្នុងការចែករំលែក (Sharing Difficulty):** ព័ត៌មាននៅក្នុងឯកសារមួយមិនអាចប្រើប្រាស់ដោយឯកសារផ្សេងបានទេ។
- **សុវត្ថិភាពទាប (Low Security):** ពិបាកក្នុងការគ្រប់គ្រងការចូលប្រើប្រាស់ទិន្នន័យ។

មូលដ្ឋានទិន្នន័យដោះស្រាយបញ្ហាទាំងនេះដោយរក្សាទុកទិន្នន័យក្នុងទីតាំងកណ្តាលតែមួយ។

---

## 2. គំរូទិន្នន័យ (Data Models)

គំរូទិន្នន័យកំណត់ពីរបៀបដែលទិន្នន័យត្រូវបានរៀបចំ និងរក្សាទុក។ គំរូដែលគេប្រើប្រាស់ច្រើនជាងគេគឺ៖

- **គំរូទំនាក់ទំនង (Relational Model):** រៀបចំទិន្នន័យក្នុងតារាង (Tables) ដែលមានជួរដេក (Rows) និងជួរឈរ (Columns)។ តារាងទាំងនេះត្រូវបានភ្ជាប់គ្នាដោយប្រើប្រាស់ទំនាក់ទំនង (Relationships)។ គំរូនេះគឺពេញនិយមបំផុតសម្រាប់មូលដ្ឋានទិន្នន័យសហគ្រាស។ ឧទាហរណ៍: MySQL, Oracle, SQL Server។
- **គំរូ Object-Oriented:** រៀបចំទិន្នន័យជា Object ដែលមានទាំងទិន្នន័យនិងវិធីសាស្ត្រប្រតិបត្តិការ។
- **គំរូ NoSQL:** មិនប្រើប្រាស់តារាងទំនាក់ទំនងទេ តែប្រើប្រាស់រចនាសម្ព័ន្ធផ្សេងៗគ្នាដូចជា Document, Key-Value, Graph ។ ឧទាហរណ៍: MongoDB, Redis។

---

## 3. សមាសធាតុនៃប្រព័ន្ធមូលដ្ឋានទិន្នន័យ

ប្រព័ន្ធមូលដ្ឋានទិន្នន័យមានសមាសធាតុសំខាន់ៗដូចខាងក្រោម៖

- **ទិន្នន័យ (Data):** វត្ថុធាតុដើមដែលត្រូវបានរក្សាទុក។
- **កម្មវិធី DBMS (Database Management System):** កម្មវិធីដែលប្រើដើម្បីបង្កើត, គ្រប់គ្រង, និងថែទាំមូលដ្ឋានទិន្នន័យ។
- **អ្នកប្រើប្រាស់ (Users):** អ្នកដែលប្រើប្រាស់ប្រព័ន្ធនេះ (អ្នកគ្រប់គ្រង, អ្នកប្រើប្រាស់ចុងក្រោយ)។
- **ភាសាមូលដ្ឋានទិន្នន័យ (Database Language):** ភាសាដូចជា SQL (Structured Query Language) ដែលប្រើដើម្បីទាក់ទងជាមួយមូលដ្ឋានទិន្នន័យ។

---

## 4. តួនាទីរបស់ DBMS (Database Management System)

DBMS គឺជាកម្មវិធីដែលដើរតួនាទីយ៉ាងសំខាន់ក្នុងការគ្រប់គ្រងមូលដ្ឋានទិន្នន័យ។ មុខងាររបស់វាមានដូចជា៖
- **ការគ្រប់គ្រងទិន្នន័យ:** អនុញ្ញាតឱ្យអ្នកប្រើប្រាស់បង្កើត, ធ្វើបច្ចុប្បន្នភាព, លុប, និងទាញយកទិន្នន័យ។
- **ការធានាសុវត្ថិភាព:** គ្រប់គ្រងសិទ្ធិចូលប្រើប្រាស់ទិន្នន័យ។
- **ការធានាភាពស៊ីគ្នា:** ធានាថាទិន្នន័យមានភាពត្រឹមត្រូវ និងស៊ីគ្នា។
- **ការគ្រប់គ្រងការបម្រុងទុក (Backup and Recovery):** ការពារទិន្នន័យពីការបាត់បង់ដោយចៃដន្យ។
`,
  examples: [
    `### ឧទាហរណ៍: ការរចនាមូលដ្ឋានទិន្នន័យសម្រាប់ហាងអនឡាញ

ពិពណ៌នាពីរបៀបដែលអ្នកអាចរចនាមូលដ្ឋានទិន្នន័យសាមញ្ញសម្រាប់ហាងអនឡាញ។

1. **តារាង Customer:** រក្សាទុកព័ត៌មានអតិថិជន។
   - **Fields (ជួរឈរ):** CustomerID (Primary Key), Name, Email, Phone Number។
2. **តារាង Product:** រក្សាទុកព័ត៌មានផលិតផល។
   - **Fields (ជួរឈរ):** ProductID (Primary Key), ProductName, Price, StockQuantity។
3. **តារាង Orders:** រក្សាទុកព័ត៌មាននៃការបញ្ជាទិញ។
   - **Fields (ជួរឈរ):** OrderID (Primary Key), CustomerID (Foreign Key), OrderDate, TotalAmount។

**ទំនាក់ទំនង:** CustomerID នៅក្នុងតារាង Orders ភ្ជាប់វាទៅនឹង CustomerID នៅក្នុងតារាង Customer។
`,
    `### ឧទាហរណ៍: ការប្រើប្រាស់ SQL ដើម្បីទាញយកទិន្នន័យ

បង្ហាញពីរបៀបដែល SQL អាចទាញយកព័ត៌មាន។

- **កូដ SQL:**
  \`\`\`sql
  SELECT ProductName, Price
  FROM Product
  WHERE Price > 50;
  \`\`\`
- **ការពន្យល់:** កូដនេះនឹងជ្រើសរើស (SELECT) ឈ្មោះផលិតផល (ProductName) និងតម្លៃ (Price) ពីតារាងផលិតផល (Product) ដែលតម្លៃរបស់វាធំជាង 50។
`
  ],
  quiz: [
    {
      question: 'តើអ្វីជាបញ្ហាមួយដែលបណ្តាលមកពីការប្រើប្រាស់ឯកសារ (Files) ដាច់ដោយឡែក?',
      options: ['ការប្រើប្រាស់កុំព្យូទ័រ', 'ភាពដដែលនៃទិន្នន័យ (Data Redundancy)', 'ល្បឿនលឿនក្នុងការចូលប្រើ', 'ការថែទាំងាយស្រួល'],
      correct: 1,
      explanation: 'ភាពដដែលនៃទិន្នន័យគឺជាបញ្ហាចម្បងមួយនៃការប្រើប្រាស់ឯកសារដាច់ដោយឡែក ដែលមូលដ្ឋានទិន្នន័យដោះស្រាយ។'
    },
    {
      question: 'តើគំរូទិន្នន័យដែលរៀបចំទិន្នន័យជាតារាងមានឈ្មោះអ្វី?',
      options: ['គំរូ NoSQL', 'គំរូ Object-Oriented', 'គំរូទំនាក់ទំនង (Relational Model)', 'គំរូ Network'],
      correct: 2,
      explanation: 'គំរូទំនាក់ទំនងរៀបចំទិន្នន័យក្នុងតារាងដែលមានជួរដេកនិងជួរឈរ។'
    },
    {
      question: 'តើ DBMS (Database Management System) មានតួនាទីអ្វី?',
      options: ['ការរៀបចំកិច្ចប្រជុំ', 'ការគ្រប់គ្រងទិន្នន័យនិងសុវត្ថិភាព', 'ការរចនា Website', 'ការផលិត Hardware'],
      correct: 1,
      explanation: 'DBMS គឺជាកម្មវិធីដែលគ្រប់គ្រងមូលដ្ឋានទិន្នន័យ រួមទាំងការធានាសុវត្ថិភាពទិន្នន័យផងដែរ។'
    },
    {
      question: 'តើអ្វីជាឈ្មោះរបស់ភាសាដែលប្រើដើម្បីទាញយកទិន្នន័យពីមូលដ្ឋានទិន្នន័យ?',
      options: ['HTML', 'Python', 'SQL', 'CSS'],
      correct: 2,
      explanation: 'SQL (Structured Query Language) គឺជាភាសាដែលត្រូវបានប្រើប្រាស់ដើម្បីទាញយក, បញ្ចូល, ធ្វើបច្ចុប្បន្នភាព, និងគ្រប់គ្រងទិន្នន័យក្នុងមូលដ្ឋានទិន្នន័យ។'
    }
  ],
  lab: {
    task: `
រចនាមូលដ្ឋានទិន្នន័យសាមញ្ញមួយសម្រាប់ប្រព័ន្ធគ្រប់គ្រងសាលារៀន។

**តម្រូវការ:**
1. កំណត់តារាងយ៉ាងតិច ៣ ដែលពាក់ព័ន្ធ។
2. សម្រាប់តារាងនីមួយៗ កំណត់ជួរឈរ (Fields) សំខាន់ៗ។
3. បង្ហាញពីរបៀបដែលតារាងទាំងនេះមានទំនាក់ទំនងគ្នា។
    `,
    solution: `
**មូលដ្ឋានទិន្នន័យសម្រាប់ប្រព័ន្ធគ្រប់គ្រងសាលារៀន**

**១. តារាង Student (សិស្ស):**
   - **ជួរឈរ:** StudentID (Primary Key), FirstName, LastName, DateOfBirth, Email។

**២. តារាង Course (មុខវិជ្ជា):**
   - **ជួរឈរ:** CourseID (Primary Key), CourseName, TeacherName, Credits។

**៣. តារាង Enrollment (ការចុះឈ្មោះ):**
   - **ជួរឈរ:** EnrollmentID (Primary Key), StudentID (Foreign Key), CourseID (Foreign Key), EnrollmentDate, Grade។

**ទំនាក់ទំនង:**
   - តារាង Enrollment ភ្ជាប់តារាង Student និងតារាង Course ជាមួយគ្នា។
   - StudentID នៅក្នុងតារាង Enrollment ភ្ជាប់ទៅ StudentID នៅក្នុងតារាង Student។
   - CourseID នៅក្នុងតារាង Enrollment ភ្ជាប់ទៅ CourseID នៅក្នុងតារាង Course។
`
  }
};

export default MISLesson2_1Content;