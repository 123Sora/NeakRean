import type { LessonContent } from '../../../../types/LessonTypes';

const SEMLesson2_3Content: LessonContent = {
  title: 'Lean and XP',
  objectives: [
    'យល់ដឹងពីគោលការណ៍គ្រឹះនៃ Lean Software Development',
    'ស្គាល់ពីការអនុវត្តន៍សំខាន់ៗនៃ Extreme Programming (XP)',
    'រៀនពីភាពខុសគ្នារវាង Lean, XP, និងវិធីសាស្ត្រ Agile ផ្សេងទៀត',
    'យល់ពីរបៀបដែល Lean និង XP ជួយបង្កើនប្រសិទ្ធភាពនិងគុណភាព',
    'អនុវត្តការប្រើប្រាស់គោលការណ៍ Lean ដើម្បីកាត់បន្ថយភាពខ្ជះខ្ជាយ'
  ],
  content: `
# Lean and XP 🚀

---

ក្រៅពី Scrum និង Kanban នៅក្នុងវិធីសាស្ត្រ **Agile** ក៏មាន **Lean Software Development** និង **Extreme Programming (XP)** ដែលជាក្របខណ្ឌការងារសំខាន់ៗផងដែរ។ ពួកគេទាំងពីរផ្តោតលើការបង្កើនប្រសិទ្ធភាពនិងគុណភាព។

---

## 1. Lean Software Development

**Lean** មានប្រភពមកពីប្រព័ន្ធផលិតកម្មរបស់ Toyota ។ វាផ្តោតលើការកាត់បន្ថយភាពខ្ជះខ្ជាយ (Waste) និងការបង្កើនប្រសិទ្ធភាព។

**គោលការណ៍សំខាន់ៗរបស់ Lean:**
- **លុបបំបាត់ភាពខ្ជះខ្ជាយ (Eliminate Waste):** លុបបំបាត់រាល់ការងារដែលគ្មានតម្លៃ (ឧទាហរណ៍: ឯកសារដែលមិនចាំបាច់, ការរង់ចាំ, កូដដែលមិនប្រើ)។
- **បង្កើតការរៀនសូត្រ (Amplify Learning):** រៀនពីកំហុស, ផ្តល់មតិកែលម្អរហ័ស។
- **សម្រេចចិត្តយឺត (Decide Late):** ពន្យារការសម្រេចចិត្តរហូតដល់មានព័ត៌មានគ្រប់គ្រាន់។
- **ផ្តល់ឱ្យលឿន (Deliver Fast):** ធ្វើការក្នុងវដ្តខ្លីៗដើម្បីផ្តល់តម្លៃឱ្យអតិថិជនលឿន។
- **ផ្តល់សិទ្ធិអំណាចដល់ក្រុម (Empower the Team):** ទុកចិត្តនិងផ្តល់អំណាចឱ្យក្រុមសម្រេចចិត្ត។
- **បង្កើតគុណភាព (Build Quality In):** ផ្តោតលើការធ្វើតេស្តនិងគុណភាពតាំងពីដើម។
- **មើលឃើញរូបភាពទាំងមូល (See the Whole):** យល់ពីទំនាក់ទំនងនៃប្រព័ន្ធទាំងមូល។

---

## 2. Extreme Programming (XP)

**Extreme Programming (XP)** គឺជាវិធីសាស្ត្រមួយដែលផ្តោតលើការអនុវត្តន៍វិស្វកម្ម Software ល្អបំផុតក្នុងកម្រិតខ្ពស់បំផុត។ វាមានប្រសិទ្ធភាពសម្រាប់ក្រុមតូចៗដែលមានតម្រូវការដែលផ្លាស់ប្តូរជាញឹកញាប់។

**ការអនុវត្តន៍សំខាន់ៗរបស់ XP:**
- **ការធ្វើការជាគូ (Pair Programming):** វិស្វករពីរនាក់ធ្វើការជាមួយគ្នានៅកុំព្យូទ័រតែមួយ។
- **ការធ្វើតេស្តជាមុន (Test-Driven Development - TDD):** សរសេរតេស្តមុននឹងសរសេរកូដ។
- **ការរចនាសាមញ្ញ (Simple Design):** រចនា Software ឱ្យសាមញ្ញតាមដែលអាចធ្វើទៅបាន។
- **ការរៀបចំកូដឡើងវិញ (Refactoring):** កែលម្អរចនាសម្ព័ន្ធកូដជាប្រចាំដោយមិនផ្លាស់ប្តូរមុខងារ។
- **ការរួមបញ្ចូលគ្នាជាបន្តបន្ទាប់ (Continuous Integration):** ក្រុមបញ្ចូលកូដជាញឹកញាប់ទៅក្នុងកូដរួម។

---

## 3. ភាពខុសគ្នារវាង Lean និង XP

- **Lean:** ជាគោលគំនិតទូលំទូលាយដែលផ្តោតលើការកាត់បន្ថយភាពខ្ជះខ្ជាយនៅក្នុងដំណើរការទាំងមូល។
- **XP:** ជាវិធីសាស្ត្រជាក់លាក់ដែលផ្តោតលើការអនុវត្តន៍បច្ចេកទេស (ដូចជា Pair Programming, TDD) ដើម្បីបង្កើនគុណភាពនិងល្បឿន។

Lean អាចត្រូវបានប្រើប្រាស់រួមគ្នាជាមួយ XP ឬវិធីសាស្ត្រ Agile ផ្សេងទៀត។

`,
  examples: [
    `### ឧទាហរណ៍: ការអនុវត្តន៍ Lean និង XP

**សេណារីយ៉ូ ១ (Lean):** ក្រុមហ៊ុនអភិវឌ្ឍន៍ Software មួយចំណាយពេលច្រើនក្នុងការរៀបចំឯកសារដែលគ្មាននរណាម្នាក់ប្រើប្រាស់។

- **ការអនុវត្តន៍ Lean:** ក្រុមហ៊ុនសម្រេចចិត្តលុបបំបាត់ការរៀបចំឯកសារដែលមិនចាំបាច់ (Eliminate Waste) ហើយផ្តោតលើការបង្កើត Software ដែលដំណើរការវិញ។

**សេណារីយ៉ូ ២ (XP):** ក្រុមអភិវឌ្ឍន៍មានបញ្ហាក្នុងការរកកំហុសក្នុងកូដ។

- **ការអនុវត្តន៍ XP:** ក្រុមចាប់ផ្តើមអនុវត្ត **Test-Driven Development (TDD)** ។ ពួកគេសរសេរតេស្តមុននឹងសរសេរកូដជាក់ស្តែង។ ពេលមានកំហុស តេស្តនឹងបរាជ័យភ្លាមៗដែលជួយឱ្យពួកគេរកកំហុសបានលឿន។
`
  ],
  quiz: [
    {
      question: 'តើគោលការណ៍សំខាន់របស់ Lean គឺអ្វី?',
      options: ['ការសរសេរឯកសារច្រើន', 'ការកាត់បន្ថយភាពខ្ជះខ្ជាយ', 'ការសម្រេចចិត្តលឿន', 'ការធ្វើការតែម្នាក់ឯង'],
      correct: 1,
      explanation: 'Lean ផ្តោតលើការលុបបំបាត់រាល់ភាពខ្ជះខ្ជាយនៅក្នុងដំណើរការ។'
    },
    {
      question: 'តើអ្វីជាការអនុវត្តន៍សំខាន់មួយរបស់ Extreme Programming (XP)?',
      options: ['ការធ្វើតេស្តនៅចុងបញ្ចប់', 'ការធ្វើការជាគូ', 'ការរចនាស្មុគស្មាញ', 'ការរួមបញ្ចូលគ្នាប្រចាំឆ្នាំ'],
      correct: 1,
      explanation: 'ការធ្វើការជាគូ (Pair Programming) គឺជាការអនុវត្តន៍ចម្បងមួយរបស់ XP។'
    },
    {
      question: 'តើការសម្រេចចិត្តយឺត (Decide Late) ក្នុង Lean មានន័យដូចម្តេច?',
      options: ['ការមិនសម្រេចចិត្តទាល់តែសោះ', 'ការពន្យារការសម្រេចចិត្តរហូតដល់មានព័ត៌មានគ្រប់គ្រាន់', 'ការសម្រេចចិត្តយ៉ាងលឿន', 'ការសម្រេចចិត្តដោយគ្មានព័ត៌មាន'],
      correct: 1,
      explanation: 'គោលការណ៍នេះមានន័យថាត្រូវពន្យារការសម្រេចចិត្តរហូតដល់មានព័ត៌មានគ្រប់គ្រាន់ដើម្បីធ្វើការសម្រេចចិត្តល្អបំផុត។'
    },
    {
      question: 'តើអ្វីជាអត្ថប្រយោជន៍នៃ Test-Driven Development (TDD) នៅក្នុង XP?',
      options: ['ធ្វើឱ្យកូដស្មុគស្មាញ', 'ជួយរកកំហុសបានលឿន', 'ចំណាយពេលយូរ', 'មិនមានអត្ថប្រយោជន៍ទេ'],
      correct: 1,
      explanation: 'TDD ជួយក្រុមឱ្យរកកំហុសបានលឿននិងបង្កើនគុណភាពកូដ។'
    },
    {
      question: 'តើការរៀបចំកូដឡើងវិញ (Refactoring) ក្នុង XP មានគោលបំណងអ្វី?',
      options: ['ផ្លាស់ប្តូរមុខងារកូដ', 'កែលម្អរចនាសម្ព័ន្ធកូដដោយមិនផ្លាស់ប្តូរមុខងារ', 'លុបកូដចោល', 'បន្ថែមមុខងារថ្មី'],
      correct: 1,
      explanation: 'Refactoring គឺដើម្បីកែលម្អរចនាសម្ព័ន្ធកូដឱ្យស្អាតនិងមានប្រសិទ្ធភាពជាងមុន។'
    },
    {
      question: 'តើគោលការណ៍ Lean មួយណាដែលទាក់ទងនឹងការកាត់បន្ថយឯកសារដែលមិនចាំបាច់?',
      options: ['Amplify Learning', 'Deliver Fast', 'Eliminate Waste', 'See the Whole'],
      correct: 2,
      explanation: 'ការកាត់បន្ថយឯកសារដែលមិនចាំបាច់គឺជាឧទាហរណ៍នៃការលុបបំបាត់ភាពខ្ជះខ្ជាយ (Eliminate Waste)។'
    },
    {
      question: 'តើវិធីសាស្ត្រមួយណាដែលល្អសម្រាប់ក្រុមតូចៗ?',
      options: ['Waterfall', 'XP', 'Lean', 'Scrum'],
      correct: 1,
      explanation: 'XP ត្រូវបានរចនាឡើងជាពិសេសសម្រាប់ក្រុមអភិវឌ្ឍន៍តូចៗ។'
    },
    {
      question: 'តើអ្វីជាភាពខុសគ្នាសំខាន់រវាង Lean និង XP?',
      options: ['Lean ផ្តោតលើដំណើរការធំ ចំណែក XP ផ្តោតលើបច្ចេកទេស', 'Lean ផ្តោតលើការសរសេរកូដ ចំណែក XP ផ្តោតលើការគ្រប់គ្រង', 'មិនមានភាពខុសគ្នាទេ', 'Lean មិនមែនជាផ្នែករបស់ Agile ទេ'],
      correct: 0,
      explanation: 'Lean គឺជាគោលគំនិតទូលំទូលាយ ចំណែក XP ជាវិធីសាស្ត្រជាក់លាក់ដែលផ្តោតលើបច្ចេកទេស។'
    },
    {
      question: 'តើអ្វីជាអត្ថប្រយោជន៍នៃការធ្វើការជាគូ (Pair Programming)?',
      options: ['ធ្វើការយឺតជាងមុន', 'កាត់បន្ថយគុណភាពកូដ', 'ជួយរកកំហុសបានលឿននិងចែករំលែកចំណេះដឹង', 'បង្កើនភាពតានតឹង'],
      correct: 2,
      explanation: 'Pair Programming ជួយឱ្យកំហុសត្រូវបានរកឃើញលឿននិងអនុញ្ញាតឱ្យវិស្វកររៀនពីគ្នាទៅវិញទៅមក។'
    },
    {
      question: 'តើការរួមបញ្ចូលគ្នាជាបន្តបន្ទាប់ (Continuous Integration) មានគោលបំណងអ្វី?',
      options: ['ដើម្បីបញ្ចូលកូដនៅចុងគម្រោង', 'ដើម្បីបញ្ចូលកូដជាញឹកញាប់ដើម្បីរកកំហុស', 'ដើម្បីលុបកូដចោល', 'ដើម្បីចំណាយពេលយូរ'],
      correct: 1,
      explanation: 'Continuous Integration គឺដើម្បីបញ្ចូលកូដជាញឹកញាប់ដើម្បីរកកំហុសនៅដំណាក់កាលដំបូង។'
    }
  ],
  lab: {
    task: `
**សេណារីយ៉ូ:** ក្រុមហ៊ុនរបស់អ្នកជួបបញ្ហាការងារច្រើនដែលមិនទាន់បានចាប់ផ្តើម។

**តម្រូវការ:**
1.  កំណត់គោលការណ៍ Lean មួយដែលអាចជួយដោះស្រាយបញ្ហានេះ។
2.  ពន្យល់ពីរបៀបដែលអ្នកនឹងអនុវត្តគោលការណ៍នោះ។
3.  ពន្យល់ពីរបៀបដែលការអនុវត្តន៍នេះអាចបង្កើនប្រសិទ្ធភាព។
    `,
    solution: `
**ការអនុវត្តន៍គោលការណ៍ Lean**

**១. គោលការណ៍ដែលត្រូវអនុវត្តន៍:**
   - **Eliminate Waste (លុបបំបាត់ភាពខ្ជះខ្ជាយ)**

**២. របៀបអនុវត្តន៍:**
   - ខ្ញុំនឹងវិភាគបញ្ជីការងារទាំងអស់ដើម្បីកំណត់ថាការងារណាដែលមិនផ្តល់តម្លៃពិតប្រាកដដល់គម្រោង។
   - ខ្ញុំនឹងរៀបចំការប្រជុំជាមួយក្រុមដើម្បីពិភាក្សាថាការងារណាខ្លះដែលគួរត្រូវលុបចោលឬកែសម្រួល។
   - ខ្ញុំនឹងផ្តោតលើការងារដែលមានអាទិភាពខ្ពស់បំផុតជាមុនសិន។

**៣. ការបង្កើនប្រសិទ្ធភាព:**
   - ការលុបបំបាត់ការងារដែលគ្មានតម្លៃនឹងជួយឱ្យក្រុមផ្តោតលើការងារសំខាន់ៗដែលផ្តល់តម្លៃដល់អតិថិជន។
   - ក្រុមនឹងអាចបញ្ចប់គម្រោងបានលឿននិងមានប្រសិទ្ធភាពជាងមុន ព្រោះមិនចាំបាច់ចំណាយពេលលើការងារដែលខ្ជះខ្ជាយ។
`
  }
};

export default SEMLesson2_3Content;