import type { LessonContent } from '../../../../types/LessonTypes';

const SEMLesson2_1Content: LessonContent = {
  title: 'Waterfall vs. Agile',
  objectives: [
    'យល់ដឹងពីគោលគំនិត និងដំណាក់កាលនៃគំរូ Waterfall',
    'ស្គាល់ពីគោលការណ៍សំខាន់ៗនៃវិធីសាស្ត្រ Agile',
    'រៀនពីភាពខុសគ្នាសំខាន់ៗរវាង Waterfall និង Agile',
    'យល់ពីគុណសម្បត្តិនិងគុណវិបត្តិនៃគំរូទាំងពីរ',
    'អនុវត្តន៍ការវិភាគថាតើគំរូមួយណាដែលស័ក្តិសមសម្រាប់គម្រោងជាក់លាក់'
  ],
  content: `
# Waterfall vs. Agile 🌊 

---

នៅក្នុងការគ្រប់គ្រងគម្រោង Software, **Software Development Life Cycle (SDLC)** គឺជាដំណើរការរៀបចំដែលមានរាល់ដំណាក់កាលទាំងអស់តាំងពីការចាប់ផ្តើមគម្រោងរហូតដល់ការបញ្ចប់។ គំរូ SDLC ពីរដែលត្រូវបានប្រើប្រាស់ទូទៅបំផុតគឺ **Waterfall** និង **Agile**។

---

## 1. គំរូ Waterfall

**Waterfall Model** គឺជាគំរូតាមលំដាប់លំដោយ (sequential) ដែលមានន័យថាដំណាក់កាលនីមួយៗត្រូវតែបញ្ចប់ទាំងស្រុង មុននឹងបន្តទៅដំណាក់កាលបន្ទាប់។ វាដូចជាការសាងសង់អាគារពីបាតឡើងលើ។

**ដំណាក់កាលសំខាន់ៗ:**
1.  **តម្រូវការ (Requirements):** ប្រមូលតម្រូវការទាំងអស់ពីអតិថិជន។
2.  **រចនា (Design):** បង្កើតស្ថាបត្យកម្មនិងការរចនា Software ។
3.  **អភិវឌ្ឍន៍ (Implementation):** ចាប់ផ្តើមសរសេរកូដ។
4.  **ធ្វើតេស្ត (Testing):** ត្រួតពិនិត្យនិងធ្វើតេស្ត Software ។
5.  **ដាក់ឱ្យប្រើប្រាស់ (Deployment):** ដាក់ Software ទៅឱ្យអ្នកប្រើប្រាស់។
6.  **ថែទាំ (Maintenance):** ជួសជុលកំហុសនិងធ្វើបច្ចុប្បន្នភាព។

**គុណសម្បត្តិ:** ងាយស្រួលគ្រប់គ្រង, ច្បាស់លាស់, ស័ក្តិសមសម្រាប់គម្រោងតូចនិងមានតម្រូវការច្បាស់លាស់។
**គុណវិបត្តិ:** មិនមានភាពបត់បែន, ការផ្លាស់ប្តូរតម្រូវការពិបាក, ហានិភ័យខ្ពស់ប្រសិនបើមានកំហុសនៅដំណាក់កាលដំបូង។

---

## 2. វិធីសាស្ត្រ Agile

**Agile** គឺជាវិធីសាស្ត្រមួយដែលមានលក្ខណៈបត់បែននិងធ្វើការម្តងហើយម្តងទៀត (iterative)។ វាផ្តោតលើការសហការ, ការផ្លាស់ប្តូរ, និងការផ្តល់តម្លៃជាបន្តបន្ទាប់។

**គោលការណ៍សំខាន់ៗរបស់ Agile:**
- **បុគ្គលនិងអន្តរកម្ម** សំខាន់ជាងដំណើរការនិងឧបករណ៍។
- **Software ដែលដំណើរការ** សំខាន់ជាងឯកសារទូលំទូលាយ។
- **ការសហការជាមួយអតិថិជន** សំខាន់ជាងការចរចាកិច្ចសន្យា។
- **ការឆ្លើយតបទៅនឹងការផ្លាស់ប្តូរ** សំខាន់ជាងការធ្វើតាមផែនការ។

**គុណសម្បត្តិ:** មានភាពបត់បែនខ្ពស់, អាចឆ្លើយតបនឹងការផ្លាស់ប្តូរ, អតិថិជនមានការចូលរួមខ្ពស់, ហានិភ័យទាប។
**គុណវិបត្តិ:** ពិបាកគ្រប់គ្រងគម្រោងធំ, ត្រូវការអតិថិជនមានការចូលរួមខ្ពស់, ឯកសារអាចមានកម្រិត។

---

## 3. ភាពខុសគ្នាសំខាន់ៗ

| លក្ខណៈវិនិច្ឆ័យ | Waterfall | Agile |
| :--- | :--- | :--- |
| **វិធីសាស្រ្ត** | តាមលំដាប់លំដោយ (Sequential) | ម្តងហើយម្តងទៀត (Iterative & Incremental) |
| **ភាពបត់បែន** | ទាប (ពិបាកផ្លាស់ប្តូរ) | ខ្ពស់ (ឆ្លើយតបនឹងការផ្លាស់ប្តូរ) |
| **ការចូលរួមអតិថិជន**| នៅពេលចាប់ផ្តើមនិងបញ្ចប់ | ជាប្រចាំ |
| **ការរៀបចំផែនការ**| រៀបចំផែនការលម្អិតតាំងពីដំបូង | រៀបចំផែនការជាជំហានៗ |
| **ហានិភ័យ**| ខ្ពស់ (បញ្ហាត្រូវបានរកឃើញនៅចុងក្រោយ) | ទាប (បញ្ហាត្រូវបានរកឃើញនិងដោះស្រាយលឿន) |
`,
  examples: [
    `### ឧទាហរណ៍: ការជ្រើសរើសគំរូ SDLC

**សេណារីយ៉ូ ១:** ក្រុមហ៊ុនអភិវឌ្ឍន៍ Software មួយត្រូវបានជួលឱ្យបង្កើតប្រព័ន្ធគ្រប់គ្រងយន្តហោះសម្រាប់រដ្ឋាភិបាល។ តម្រូវការទាំងអស់ត្រូវបានកំណត់ច្បាស់លាស់តាំងពីដំបូង ហើយមិនអាចផ្លាស់ប្តូរបាន។

- **ការវិភាគ:** គម្រោងនេះមានហានិភ័យខ្ពស់, តម្រូវការមិនផ្លាស់ប្តូរ, និងមានលក្ខណៈសុវត្ថិភាពខ្ពស់។
- **ការសម្រេចចិត្ត:** **គំរូ Waterfall** ស័ក្តិសមបំផុតព្រោះវាមានដំណើរការច្បាស់លាស់និងមានឯកសារពេញលេញ។

**សេណារីយ៉ូ ២:** ក្រុមហ៊ុនមួយចង់បង្កើត Mobile App ថ្មីសម្រាប់កុម្ម៉ង់អាហារ។ ពួកគេមិនទាន់ដឹងច្បាស់ថាអតិថិជនត្រូវការអ្វីខ្លះទេ ហើយចង់សាកល្បងមុខងារថ្មីៗជាបន្តបន្ទាប់។

- **ការវិភាគ:** គម្រោងនេះត្រូវការភាពបត់បែន, ការផ្លាស់ប្តូរញឹកញាប់, និងការចូលរួមពីអតិថិជន។
- **ការសម្រេចចិត្ត:** **វិធីសាស្ត្រ Agile** ស័ក្តិសមបំផុតព្រោះវាអនុញ្ញាតឱ្យមានការផ្លាស់ប្តូរនិងការផ្តល់តម្លៃជាបន្តបន្ទាប់។
`
  ],
  quiz: [
    {
      question: 'តើអ្វីជាលក្ខណៈពិសេសចម្បងនៃគំរូ Waterfall?',
      options: ['ការផ្លាស់ប្តូរញឹកញាប់', 'ការងារម្តងហើយម្តងទៀត', 'ដំណើរការតាមលំដាប់លំដោយ', 'ការធ្វើការដោយគ្មានផែនការ'],
      correct: 2,
      explanation: 'គំរូ Waterfall ដំណើរការតាមលំដាប់លំដោយ ដែលដំណាក់កាលមួយត្រូវតែចប់មុននឹងបន្តទៅដំណាក់កាលបន្ទាប់។'
    },
    {
      question: 'តើគោលការណ៍ Agile មួយណាដែលសង្កត់ធ្ងន់លើការធ្វើការជាមួយអតិថិជន?',
      options: ['បុគ្គលនិងអន្តរកម្ម', 'Software ដែលដំណើរការ', 'ការសហការជាមួយអតិថិជន', 'ការធ្វើតាមផែនការ'],
      correct: 2,
      explanation: 'Agile ផ្តោតលើការសហការជាប្រចាំជាមួយអតិថិជនដើម្បីធានាថាផលិតផលបំពេញតាមតម្រូវការ។'
    },
    {
      question: 'ក្នុងគំរូ Waterfall តើកំហុសដែលកើតឡើងនៅដំណាក់កាលដំបូងត្រូវបានរកឃើញនៅពេលណា?',
      options: ['នៅពេលចាប់ផ្តើមគម្រោង', 'នៅពាក់កណ្តាលគម្រោង', 'នៅចុងបញ្ចប់នៃគម្រោង', 'មិនអាចរកឃើញទេ'],
      correct: 2,
      explanation: 'ក្នុងគំរូ Waterfall កំហុសអាចត្រូវបានរកឃើញនៅដំណាក់កាលចុងក្រោយ ដែលធ្វើឱ្យការជួសជុលចំណាយពេលនិងថវិកាច្រើន។'
    },
    {
      question: 'តើគំរូមួយណាដែលស័ក្តិសមសម្រាប់គម្រោងដែលតម្រូវការមិនច្បាស់លាស់តាំងពីដំបូង?',
      options: ['Waterfall', 'Agile', 'V-Model', 'Spiral'],
      correct: 1,
      explanation: 'Agile គឺមានភាពបត់បែនខ្ពស់និងអាចសម្របខ្លួនទៅនឹងតម្រូវការដែលផ្លាស់ប្តូរបាន។'
    },
    {
      question: 'តើការរៀបចំផែនការក្នុងគំរូ Agile មានលក្ខណៈដូចម្តេច?',
      options: ['រៀបចំផែនការលម្អិតតាំងពីដំបូង', 'មិនមានការរៀបចំផែនការទេ', 'រៀបចំផែនការជាជំហានៗនិងបត់បែន', 'រៀបចំផែនការតែនៅចុងបញ្ចប់'],
      correct: 2,
      explanation: 'Agile រៀបចំផែនការជាជំហានៗនិងអាចបត់បែនទៅតាមការផ្លាស់ប្តូរ។'
    },
    {
      question: 'តើអ្វីជាគុណវិបត្តិនៃគំរូ Waterfall?',
      options: ['មានភាពបត់បែនខ្ពស់', 'ការផ្លាស់ប្តូរតម្រូវការមានភាពងាយស្រួល', 'មិនសូវមានឯកសារ', 'ហានិភ័យខ្ពស់ប្រសិនបើមានកំហុសនៅដំណាក់កាលដំបូង'],
      correct: 3,
      explanation: 'ការរកឃើញកំហុសយឺតយ៉ាវនិងការលំបាកក្នុងការកែប្រែតម្រូវការគឺជាគុណវិបត្តិធំរបស់ Waterfall។'
    },
    {
      question: 'តើគំរូមួយណាដែលផ្តោតលើការផ្តល់ផលិតផលដែលដំណើរការឱ្យអតិថិជនជាបន្តបន្ទាប់?',
      options: ['Waterfall', 'Agile', 'Lean', 'Prototype'],
      correct: 1,
      explanation: 'Agile ផ្តោតលើការផ្តល់កំណែថ្មីៗនៃ Software ឱ្យអតិថិជនជាបន្តបន្ទាប់។'
    },
    {
      question: 'តើការសរសេរកូដនៅក្នុង Waterfall ចាប់ផ្តើមនៅពេលណា?',
      options: ['នៅពេលដែលគម្រោងចាប់ផ្តើម', 'នៅពេលដែលការរចនាចប់', 'នៅពេលដែលតម្រូវការចប់', 'នៅពេលដែលការធ្វើតេស្តចប់'],
      correct: 1,
      explanation: 'ការសរសេរកូដ (Implementation) ចាប់ផ្តើមនៅពេលដែលដំណាក់កាលរចនាចប់ទាំងស្រុង។'
    },
    {
      question: 'តើគំរូ SDLC មួយណាដែលត្រូវការការចូលរួមពីអតិថិជនជាប្រចាំ?',
      options: ['Waterfall', 'Agile', 'Big Bang', 'V-Model'],
      correct: 1,
      explanation: 'Agile ផ្តោតលើការសហការជិតស្និទ្ធជាមួយអតិថិជនពេញមួយគម្រោង។'
    },
    {
      question: 'តើអ្វីជាគោលការណ៍សំខាន់របស់ Agile Manifesto?',
      options: ['ឯកសារលម្អិតជាង Software ដែលដំណើរការ', 'ការធ្វើតាមផែនការជាងការឆ្លើយតបទៅនឹងការផ្លាស់ប្តូរ', 'ការសហការជាមួយអតិថិជនជាងការចរចាកិច្ចសន្យា', 'ដំណើរការនិងឧបករណ៍ជាងបុគ្គល'],
      correct: 2,
      explanation: 'គោលការណ៍សំខាន់របស់ Agile Manifesto គឺការសហការជាមួយអតិថិជនសំខាន់ជាងការចរចាកិច្ចសន្យា។'
    }
  ],
  lab: {
    task: `
**សេណារីយ៉ូ:** ក្រុមហ៊ុនអ្នកចង់បង្កើត Software ថ្មីមួយ ប៉ុន្តែមិនទាន់សម្រេចថាតើត្រូវប្រើគំរូ Waterfall ឬ Agile ទេ។ គម្រោងនេះគឺជាប្រព័ន្ធគ្រប់គ្រងសាលារៀន ដែលមានមុខងារដូចជាការចុះឈ្មោះសិស្ស, ការគ្រប់គ្រងគ្រូបង្រៀន, និងការដាក់ពិន្ទុ។ តម្រូវការត្រូវបានកំណត់ភាគច្រើន ប៉ុន្តែអាចមានការកែប្រែខ្លះនៅពេលក្រោយ។

**តម្រូវការ:**
1.  វិភាគពីគុណសម្បត្តិនិងគុណវិបត្តិនៃគំរូ Waterfall និង Agile សម្រាប់គម្រោងនេះ។
2.  ផ្តល់អនុសាសន៍ថាគួរប្រើគំរូមួយណាហើយហេតុអ្វី។
3.  ពន្យល់ពីរបៀបដែលគំរូដែលអ្នកបានជ្រើសរើសអាចដោះស្រាយបញ្ហាដែលមានការកែប្រែតម្រូវការ។
    `,
    solution: `
**ការវិភាគនិងអនុសាសន៍សម្រាប់គម្រោងគ្រប់គ្រងសាលារៀន**

**១. ការវិភាគ:**
   - **Waterfall:** គុណសម្បត្តិគឺអាចរៀបចំផែនការច្បាស់លាស់និងមានឯកសារពេញលេញ ដែលល្អសម្រាប់ប្រព័ន្ធគ្រប់គ្រងដែលត្រូវការលក្ខណៈពិសេសច្បាស់លាស់។ គុណវិបត្តិគឺការកែប្រែតម្រូវការនៅពេលក្រោយអាចពិបាកនិងចំណាយច្រើន។
   - **Agile:** គុណសម្បត្តិគឺមានភាពបត់បែនខ្ពស់និងអាចសម្របខ្លួនទៅនឹងការផ្លាស់ប្តូរតម្រូវការ។ គុណវិបត្តិគឺអាចមានការកង្វះឯកសារនិងការគ្រប់គ្រងដែលលំបាកបន្តិច។

**២. អនុសាសន៍:**
   - ខ្ញុំសូមណែនាំឱ្យប្រើ **វិធីសាស្ត្រ Agile**។

**៣. ហេតុផល:**
   - ថ្វីត្បិតតែតម្រូវការភាគច្រើនត្រូវបានកំណត់ ប៉ុន្តែមានការបញ្ជាក់ថាអាចមានការកែប្រែនៅពេលក្រោយ។ វិធីសាស្ត្រ Agile អនុញ្ញាតឱ្យមានការផ្លាស់ប្តូរតម្រូវការនេះដោយងាយស្រួល។ លើសពីនេះ វានឹងអនុញ្ញាតឱ្យសាលារៀន (ជាអតិថិជន) ចូលរួមជាប្រចាំក្នុងការផ្តល់មតិកែលម្អលើផលិតផលដែលបានបង្កើតឡើងជាជំហានៗ។ ការធ្វើបែបនេះអាចកាត់បន្ថយហានិភ័យនៃការបង្កើត Software ដែលមិនបំពេញតាមតម្រូវការជាក់ស្តែងរបស់ពួកគេ។
`
  }
};

export default SEMLesson2_1Content;