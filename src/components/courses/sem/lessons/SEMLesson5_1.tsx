import type { LessonContent } from '../../../../types/LessonTypes';

const SEMLesson5_1Content: LessonContent = {
  title: 'មូលដ្ឋានគ្រឹះនិងស្តង់ដារ SQA',
  objectives: [
    'យល់ដឹងពីគោលគំនិត Software Quality Assurance (SQA)',
    'ស្គាល់ពីសារៈសំខាន់នៃ SQA នៅក្នុងវដ្តជីវិតអភិវឌ្ឍន៍ Software',
    'រៀនពីភាពខុសគ្នារវាង Quality Assurance, Quality Control, និង Testing',
    'យល់ដឹងពីស្តង់ដារគុណភាព Software ដូចជា ISO 9000 និង CMMI',
    'អនុវត្តការកំណត់គោលការណ៍គុណភាពសម្រាប់គម្រោង'
  ],
  content: `
# មូលដ្ឋានគ្រឹះនិងស្តង់ដារ Software Quality Assurance (SQA) 💯

---

**Software Quality Assurance (SQA)** គឺជាដំណើរការមួយដែលធានាថា Software ដែលបានបង្កើតមានគុណភាពត្រឹមត្រូវតាមស្តង់ដារដែលបានកំណត់។ វាគ្របដណ្តប់លើរាល់សកម្មភាពទាំងអស់តាំងពីការរៀបចំផែនការរហូតដល់ការដាក់ឱ្យប្រើប្រាស់។

---

## 1. គោលគំនិត Software Quality Assurance (SQA)

**SQA** ផ្តោតលើការ **ការពារកំហុស** (defect prevention)។ វាមិនមែនជាការរកកំហុសនោះទេ ប៉ុន្តែជាការធានាថាកំហុសមិនកើតឡើងតាំងពីដំបូង។ វាជាការអនុវត្តន៍វិធានការជាប្រព័ន្ធដើម្បីវាយតម្លៃនិងកែលម្អដំណើរការអភិវឌ្ឍន៍ Software ។

**ធាតុផ្សំសំខាន់ៗនៃ SQA:**
- **ការអនុវត្តន៍ស្តង់ដារ:** អនុវត្តតាមស្តង់ដារឧស្សាហកម្មដូចជា ISO 9000 ។
- **ការត្រួតពិនិត្យដំណើរការ:** ត្រួតពិនិត្យរាល់ដំណើរការទាំងអស់នៅក្នុង SDLC។
- **ការវាយតម្លៃគុណភាព:** វាយតម្លៃផលិតផលនិងដំណើរការ។

---

## 2. Quality Assurance, Quality Control, and Testing

ជារឿយៗមនុស្សច្រឡំរវាងពាក្យទាំងបីនេះ៖
- **Quality Assurance (QA):** ផ្តោតលើ **ដំណើរការ** (Process-oriented)។ គោលបំណងគឺដើម្បីការពារកំហុស។ ឧទាហរណ៍៖ ការបង្កើតគោលការណ៍កូដ, ការត្រួតពិនិត្យការរចនា។
- **Quality Control (QC):** ណោតលើ **ផលិតផល** (Product-oriented)។ គោលបំណងគឺដើម្បីរកកំហុស។ ឧទាហរណ៍៖ ការត្រួតពិនិត្យផលិតផលដែលបានបញ្ចប់។
- **Testing:** គឺជាផ្នែកមួយនៃ QC ដែលជាសកម្មភាពជាក់ស្តែងនៃការរកកំហុស។ ឧទាហរណ៍៖ ការធ្វើតេស្តមុខងារ, ការធ្វើតេស្តសុវត្ថិភាព។

**ដូច្នេះ QA គឺជាវិធានការដើម្បីការពារ ខណៈពេលដែល QC (និង Testing) គឺជាវិធានការដើម្បីរកកំហុស។**

---

## 3. ស្តង់ដារនិងគំរូគុណភាព

- **ISO 9000:** ជាស្តង់ដារអន្តរជាតិសម្រាប់ប្រព័ន្ធគ្រប់គ្រងគុណភាព។ វាផ្តល់ការណែនាំអំពីរបៀបបង្កើតប្រព័ន្ធគ្រប់គ្រងគុណភាពដែលមានប្រសិទ្ធភាព។
- **Capability Maturity Model Integration (CMMI):** ជាគំរូដែលជួយក្រុមហ៊ុនកែលម្អដំណើរការរបស់ខ្លួន។ វាមានកម្រិត (Levels) ចំនួន ៥ ដែលបង្ហាញពីភាពចាស់ទុំរបស់អង្គភាព៖
  - **Level 1 (Initial):** ដំណើរការមិនច្បាស់លាស់។
  - **Level 2 (Managed):** ដំណើរការត្រូវបានគ្រប់គ្រង។
  - **Level 3 (Defined):** ដំណើរការត្រូវបានកំណត់ច្បាស់លាស់។
  - **Level 4 (Quantitatively Managed):** ដំណើរការត្រូវបានវាស់វែងនិងគ្រប់គ្រងដោយប្រើទិន្នន័យ។
  - **Level 5 (Optimizing):** ដំណើរការត្រូវបានកែលម្អជាបន្តបន្ទាប់។

`,
  examples: [
    `### ឧទាហរណ៍: ការអនុវត្តន៍ SQA

**សេណារីយ៉ូ:** ក្រុមអភិវឌ្ឍន៍ Software មួយចង់ធានាថា Software របស់ពួកគេមានគុណភាពខ្ពស់។

**1. ការអនុវត្តន៍ SQA (ការការពារកំហុស):**
   - ក្រុមបង្កើតគោលការណ៍កូដ (Coding Standards) ច្បាស់លាស់សម្រាប់គ្រប់សមាជិក។
   - ពួកគេធ្វើការត្រួតពិនិត្យការរចនា (Design Reviews) មុននឹងចាប់ផ្តើមសរសេរកូដ។
   - ពួកគេប្រើឧបករណ៍វិភាគកូដដោយស្វ័យប្រវត្តិដើម្បីរកកំហុសតូចៗ។

**2. ការអនុវត្តន៍ QC (ការរកកំហុស):**
   - អ្នកធ្វើតេស្តសរសេរ Test Cases ដើម្បីផ្ទៀងផ្ទាត់មុខងារ។
   - ពួកគេធ្វើតេស្តមុខងារ, តេស្តសុវត្ថិភាព, និងតេស្តប្រតិបត្តិការ។
`
  ],
  quiz: [
    {
      question: 'តើគោលបំណងសំខាន់នៃ SQA គឺអ្វី?',
      options: ['ការរកកំហុសបន្ទាប់ពី Software ចប់', 'ការការពារកំហុសតាំងពីដើម', 'ការធ្វើតេស្តតែប៉ុណ្ណោះ', 'ការគ្រប់គ្រងថវិកា'],
      correct: 1,
      explanation: 'SQA ផ្តោតលើការការពារកំហុសដោយការវាយតម្លៃនិងកែលម្អដំណើរការ។'
    },
    {
      question: 'តើ Quality Control (QC) ផ្តោតលើអ្វី?',
      options: ['ដំណើរការអភិវឌ្ឍន៍', 'ផលិតផលសម្រេច', 'ការគ្រប់គ្រងហិរញ្ញវត្ថុ', 'ការរៀបចំផែនការ'],
      correct: 1,
      explanation: 'QC ផ្តោតលើការត្រួតពិនិត្យផលិតផលដើម្បីរកកំហុស។'
    },
    {
      question: 'តើ Testing គឺជាផ្នែកមួយនៃអ្វី?',
      options: ['Quality Assurance', 'Quality Control', 'Project Management', 'Requirements Engineering'],
      correct: 1,
      explanation: 'Testing គឺជាផ្នែកជាក់ស្តែងនៃ Quality Control ដែលជាសកម្មភាពនៃការរកកំហុស។'
    },
    {
      question: 'តើ ISO 9000 គឺជាអ្វី?',
      options: ['គំរូអភិវឌ្ឍន៍ Software', 'ស្តង់ដារគ្រប់គ្រងគុណភាពអន្តរជាតិ', 'ភាសាសរសេរកូដ', 'ឧបករណ៍ធ្វើតេស្ត'],
      correct: 1,
      explanation: 'ISO 9000 គឺជាស្តង់ដារសម្រាប់ប្រព័ន្ធគ្រប់គ្រងគុណភាព។'
    },
    {
      question: 'តើអ្វីជាកម្រិតទាបបំផុតនៅក្នុងគំរូ CMMI?',
      options: ['Level 5 (Optimizing)', 'Level 3 (Defined)', 'Level 1 (Initial)', 'Level 2 (Managed)'],
      correct: 2,
      explanation: 'Level 1 (Initial) គឺជាកម្រិតទាបបំផុតដែលដំណើរការមិនច្បាស់លាស់។'
    },
    {
      question: 'តើអ្វីជាគោលការណ៍នៃការការពារកំហុស?',
      options: ['ការរកឃើញកំហុសនៅដំណាក់កាលក្រោយ', 'ការធានាថាកំហុសមិនកើតឡើងតាំងពីដំបូង', 'ការជួសជុលកំហុសលឿន', 'ការមិនខ្វល់ពីកំហុស'],
      correct: 1,
      explanation: 'គោលការណ៍នៃការការពារកំហុសគឺផ្តោតលើការទប់ស្កាត់កំហុសមុននឹងវាកើតឡើង។'
    },
    {
      question: 'តើ SQA គួរត្រូវបានអនុវត្តនៅពេលណា?',
      options: ['នៅពេលដែល Software ចប់', 'នៅគ្រប់ដំណាក់កាលនៃ SDLC', 'នៅដំណាក់កាលធ្វើតេស្តតែប៉ុណ្ណោះ', 'នៅដំណាក់កាលរៀបចំផែនការ'],
      correct: 1,
      explanation: 'SQA គ្របដណ្តប់លើរាល់សកម្មភាពទាំងអស់នៃ SDLC។'
    },
    {
      question: 'តើអ្វីទៅជាការត្រួតពិនិត្យដំណើរការ (Process Monitoring)?',
      options: ['ការត្រួតពិនិត្យតែផលិតផល', 'ការត្រួតពិនិត្យរាល់សកម្មភាពក្នុង SDLC', 'ការត្រួតពិនិត្យតែការសរសេរកូដ', 'ការត្រួតពិនិត្យថវិកា'],
      correct: 1,
      explanation: 'ការត្រួតពិនិត្យដំណើរការគឺជាផ្នែកមួយនៃ SQA ដែលត្រួតពិនិត្យរាល់សកម្មភាពក្នុង SDLC។'
    },
    {
      question: 'តើអ្វីជាអត្ថប្រយោជន៍សំខាន់នៃ SQA?',
      options: ['ការចំណាយច្រើន', 'គុណភាព Software ទាប', 'ការបង្កើនប្រសិទ្ធភាពនិងកាត់បន្ថយការចំណាយលើការជួសជុល', 'ការពន្យារពេលគម្រោង'],
      correct: 2,
      explanation: 'SQA ជួយបង្កើនប្រសិទ្ធភាពដោយកាត់បន្ថយចំនួនកំហុសនិងការចំណាយលើការជួសជុល។'
    }
  ],
  lab: {
    task: `
**សេណារីយ៉ូ:** អ្នកជា Software Manager ហើយអ្នកចង់បង្កើតគោលការណ៍ SQA សម្រាប់គម្រោង Website E-commerce ថ្មីមួយ។

**តម្រូវការ:**
1.  កំណត់គោលការណ៍ SQA យ៉ាងតិច ៣ សម្រាប់គម្រោងនេះ។
2.  ពន្យល់ពីរបៀបដែលគោលការណ៍ទាំងនោះជួយធានាគុណភាព Software ។
3.  បែងចែកគោលការណ៍ទាំងនោះទៅជា QA ឬ QC ។
    `,
    solution: `
**ការកំណត់គោលការណ៍ SQA សម្រាប់ Website E-commerce**

**១. គោលការណ៍ SQA:**
   - **គោលការណ៍ទី ១ (QA):** រៀបចំគោលការណ៍កូដ (Coding Standard) ច្បាស់លាស់សម្រាប់ក្រុមអភិវឌ្ឍន៍។
   - **គោលការណ៍ទី ២ (QA):** ធ្វើការត្រួតពិនិត្យការរចនា (Design Review) សម្រាប់មុខងារនីមួយៗមុននឹងចាប់ផ្តើមសរសេរកូដ។
   - **គោលការណ៍ទី ៣ (QC):** ធ្វើការធ្វើតេស្តមុខងារពេញលេញ (Full Functional Testing) បន្ទាប់ពីការអភិវឌ្ឍន៍មុខងារនីមួយៗចប់។

**២. របៀបជួយធានាគុណភាព:**
   - **គោលការណ៍ទី ១:** ការធ្វើតាមគោលការណ៍កូដដូចគ្នាជួយកាត់បន្ថយកំហុសនិងធ្វើឱ្យកូដងាយស្រួលយល់។
   - **គោលការណ៍ទី ២:** ការត្រួតពិនិត្យការរចនាជួយរកបញ្ហាដែលអាចកើតឡើងមុននឹងចាប់ផ្តើមសរសេរកូដ ដែលជួយសន្សំសំចៃពេលវេលានិងថវិកា។
   - **គោលការណ៍ទី ៣:** ការធ្វើតេស្តមុខងារជួយធានាថា Website ដំណើរការត្រឹមត្រូវតាមតម្រូវការរបស់អតិថិជន។
`
  }
};

export default SEMLesson5_1Content;